{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cheminformatics_predicting_solubility reproduce Delaney's .ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"OQi3X7TNUl5Y"},"source":["# **Cheminformatics in Python: Predicting Solubility of Molecules | Data Science Project** \n","\n","Nusrat Jahan\n","\n","In this Jupyter notebook, we will dive into the world of Cheminformatics which lies at the interface of Informatics and Chemistry. We will be reproducing a research article (by John S. Delaney$^1$) by applying Linear Regression to predict the solubility of molecules (i.e. solubility of drugs is an important physicochemical property in Drug discovery, design and development).\n","\n","This idea for this notebook was inspired by the excellent blog post by Pat Walters$^2$ where he reproduced the linear regression model with similar degree of performance as that of Delaney. This example is also briefly described in the book ***Deep Learning for the Life Sciences: Applying Deep Learning to Genomics, Microscopy, Drug Discovery, and More***.$^3$"]},{"cell_type":"markdown","metadata":{"id":"AQW_Ts66R4Ms"},"source":["## **1. Install rdkit**"]},{"cell_type":"code","metadata":{"id":"-jNwdYoBR8ea","outputId":"172bb7e8-04eb-447e-f497-0c083f239350","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415526011,"user_tz":300,"elapsed":53141,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local\n","! conda install -c rdkit rdkit -y\n","import sys\n","sys.path.append('/usr/local/lib/python3.7/site-packages/')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-08-13 18:31:12--  https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","Resolving repo.anaconda.com (repo.anaconda.com)... 104.16.131.3, 104.16.130.3, 2606:4700::6810:8203, ...\n","Connecting to repo.anaconda.com (repo.anaconda.com)|104.16.131.3|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 85055499 (81M) [application/x-sh]\n","Saving to: ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh’\n","\n","Miniconda3-py37_4.8 100%[===================>]  81.12M  31.7MB/s    in 2.6s    \n","\n","2022-08-13 18:31:15 (31.7 MB/s) - ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh’ saved [85055499/85055499]\n","\n","PREFIX=/usr/local\n","Unpacking payload ...\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\b| \b\bdone\n","Solving environment: - \b\b\\ \b\b| \b\bdone\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - _libgcc_mutex==0.1=main\n","    - asn1crypto==1.3.0=py37_0\n","    - ca-certificates==2020.1.1=0\n","    - certifi==2019.11.28=py37_0\n","    - cffi==1.14.0=py37h2e261b9_0\n","    - chardet==3.0.4=py37_1003\n","    - conda-package-handling==1.6.0=py37h7b6447c_0\n","    - conda==4.8.2=py37_0\n","    - cryptography==2.8=py37h1ba5d50_0\n","    - idna==2.8=py37_0\n","    - ld_impl_linux-64==2.33.1=h53a641e_7\n","    - libedit==3.1.20181209=hc058e9b_0\n","    - libffi==3.2.1=hd88cf55_4\n","    - libgcc-ng==9.1.0=hdf63c60_0\n","    - libstdcxx-ng==9.1.0=hdf63c60_0\n","    - ncurses==6.2=he6710b0_0\n","    - openssl==1.1.1d=h7b6447c_4\n","    - pip==20.0.2=py37_1\n","    - pycosat==0.6.3=py37h7b6447c_0\n","    - pycparser==2.19=py37_0\n","    - pyopenssl==19.1.0=py37_0\n","    - pysocks==1.7.1=py37_0\n","    - python==3.7.6=h0371630_2\n","    - readline==7.0=h7b6447c_5\n","    - requests==2.22.0=py37_1\n","    - ruamel_yaml==0.15.87=py37h7b6447c_0\n","    - setuptools==45.2.0=py37_0\n","    - six==1.14.0=py37_0\n","    - sqlite==3.31.1=h7b6447c_0\n","    - tk==8.6.8=hbc83047_0\n","    - tqdm==4.42.1=py_0\n","    - urllib3==1.25.8=py37_0\n","    - wheel==0.34.2=py37_0\n","    - xz==5.2.4=h14c3975_4\n","    - yaml==0.1.7=had09818_2\n","    - zlib==1.2.11=h7b6447c_3\n","\n","\n","The following NEW packages will be INSTALLED:\n","\n","  _libgcc_mutex      pkgs/main/linux-64::_libgcc_mutex-0.1-main\n","  asn1crypto         pkgs/main/linux-64::asn1crypto-1.3.0-py37_0\n","  ca-certificates    pkgs/main/linux-64::ca-certificates-2020.1.1-0\n","  certifi            pkgs/main/linux-64::certifi-2019.11.28-py37_0\n","  cffi               pkgs/main/linux-64::cffi-1.14.0-py37h2e261b9_0\n","  chardet            pkgs/main/linux-64::chardet-3.0.4-py37_1003\n","  conda              pkgs/main/linux-64::conda-4.8.2-py37_0\n","  conda-package-han~ pkgs/main/linux-64::conda-package-handling-1.6.0-py37h7b6447c_0\n","  cryptography       pkgs/main/linux-64::cryptography-2.8-py37h1ba5d50_0\n","  idna               pkgs/main/linux-64::idna-2.8-py37_0\n","  ld_impl_linux-64   pkgs/main/linux-64::ld_impl_linux-64-2.33.1-h53a641e_7\n","  libedit            pkgs/main/linux-64::libedit-3.1.20181209-hc058e9b_0\n","  libffi             pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4\n","  libgcc-ng          pkgs/main/linux-64::libgcc-ng-9.1.0-hdf63c60_0\n","  libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-9.1.0-hdf63c60_0\n","  ncurses            pkgs/main/linux-64::ncurses-6.2-he6710b0_0\n","  openssl            pkgs/main/linux-64::openssl-1.1.1d-h7b6447c_4\n","  pip                pkgs/main/linux-64::pip-20.0.2-py37_1\n","  pycosat            pkgs/main/linux-64::pycosat-0.6.3-py37h7b6447c_0\n","  pycparser          pkgs/main/linux-64::pycparser-2.19-py37_0\n","  pyopenssl          pkgs/main/linux-64::pyopenssl-19.1.0-py37_0\n","  pysocks            pkgs/main/linux-64::pysocks-1.7.1-py37_0\n","  python             pkgs/main/linux-64::python-3.7.6-h0371630_2\n","  readline           pkgs/main/linux-64::readline-7.0-h7b6447c_5\n","  requests           pkgs/main/linux-64::requests-2.22.0-py37_1\n","  ruamel_yaml        pkgs/main/linux-64::ruamel_yaml-0.15.87-py37h7b6447c_0\n","  setuptools         pkgs/main/linux-64::setuptools-45.2.0-py37_0\n","  six                pkgs/main/linux-64::six-1.14.0-py37_0\n","  sqlite             pkgs/main/linux-64::sqlite-3.31.1-h7b6447c_0\n","  tk                 pkgs/main/linux-64::tk-8.6.8-hbc83047_0\n","  tqdm               pkgs/main/noarch::tqdm-4.42.1-py_0\n","  urllib3            pkgs/main/linux-64::urllib3-1.25.8-py37_0\n","  wheel              pkgs/main/linux-64::wheel-0.34.2-py37_0\n","  xz                 pkgs/main/linux-64::xz-5.2.4-h14c3975_4\n","  yaml               pkgs/main/linux-64::yaml-0.1.7-had09818_2\n","  zlib               pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3\n","\n","\n","Preparing transaction: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","Executing transaction: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","installation finished.\n","WARNING:\n","    You currently have a PYTHONPATH environment variable set. This may cause\n","    unexpected behavior when running the Python interpreter in Miniconda3.\n","    For best results, please verify that your PYTHONPATH only points to\n","    directories of packages that are compatible with the Python interpreter\n","    in Miniconda3: /usr/local\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","Solving environment: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - rdkit\n","\n","\n","The following packages will be downloaded:\n","\n","    package                    |            build\n","    ---------------------------|-----------------\n","    blas-1.0                   |              mkl           6 KB\n","    bottleneck-1.3.4           |   py37hce1f21e_0         126 KB\n","    bzip2-1.0.8                |       h7b6447c_0          78 KB\n","    ca-certificates-2022.07.19 |       h06a4308_0         124 KB\n","    cairo-1.16.0               |       h19f5f5c_2         1.1 MB\n","    certifi-2022.6.15          |   py37h06a4308_0         153 KB\n","    conda-4.13.0               |   py37h06a4308_0         890 KB\n","    fontconfig-2.13.1          |       h6c09931_0         250 KB\n","    freetype-2.11.0            |       h70c0345_0         618 KB\n","    giflib-5.2.1               |       h7b6447c_0          78 KB\n","    glib-2.69.1                |       h4ff587b_1         1.7 MB\n","    icu-58.2                   |       he6710b0_3        10.5 MB\n","    intel-openmp-2021.4.0      |    h06a4308_3561         4.2 MB\n","    jpeg-9e                    |       h7f8727e_0         240 KB\n","    lcms2-2.12                 |       h3be6417_0         312 KB\n","    libboost-1.73.0            |      h28710b8_12        13.8 MB\n","    libffi-3.3                 |       he6710b0_2          50 KB\n","    libpng-1.6.37              |       hbc83047_0         278 KB\n","    libtiff-4.2.0              |       h2818925_1         452 KB\n","    libuuid-1.0.3              |       h7f8727e_2          17 KB\n","    libwebp-1.2.2              |       h55f646e_0          80 KB\n","    libwebp-base-1.2.2         |       h7f8727e_0         440 KB\n","    libxcb-1.15                |       h7f8727e_0         505 KB\n","    libxml2-2.9.14             |       h74e7548_0         718 KB\n","    lz4-c-1.9.3                |       h295c915_1         185 KB\n","    mkl-2021.4.0               |     h06a4308_640       142.6 MB\n","    mkl-service-2.4.0          |   py37h7f8727e_0          56 KB\n","    mkl_fft-1.3.1              |   py37hd3c417c_0         172 KB\n","    mkl_random-1.2.2           |   py37h51133e4_0         287 KB\n","    numexpr-2.8.1              |   py37h6abb31d_0         123 KB\n","    numpy-1.21.5               |   py37he7a7128_2          10 KB\n","    numpy-base-1.21.5          |   py37hf524024_2         4.8 MB\n","    openssl-1.1.1q             |       h7f8727e_0         2.5 MB\n","    packaging-21.3             |     pyhd3eb1b0_0          36 KB\n","    pandas-1.3.5               |   py37h8c16a72_0         9.3 MB\n","    pcre-8.45                  |       h295c915_0         207 KB\n","    pillow-9.0.1               |   py37h22f2fdc_0         652 KB\n","    pixman-0.40.0              |       h7f8727e_1         373 KB\n","    py-boost-1.73.0            |  py37h51133e4_12         195 KB\n","    pyparsing-3.0.4            |     pyhd3eb1b0_0          81 KB\n","    python-dateutil-2.8.2      |     pyhd3eb1b0_0         233 KB\n","    pytz-2022.1                |   py37h06a4308_0         196 KB\n","    rdkit-2020.09.1.0          |   py37hd50e099_1        25.8 MB  rdkit\n","    xz-5.2.5                   |       h7f8727e_1         339 KB\n","    zlib-1.2.12                |       h7f8727e_2         106 KB\n","    zstd-1.5.2                 |       ha4553b6_0         488 KB\n","    ------------------------------------------------------------\n","                                           Total:       225.2 MB\n","\n","The following NEW packages will be INSTALLED:\n","\n","  blas               pkgs/main/linux-64::blas-1.0-mkl\n","  bottleneck         pkgs/main/linux-64::bottleneck-1.3.4-py37hce1f21e_0\n","  bzip2              pkgs/main/linux-64::bzip2-1.0.8-h7b6447c_0\n","  cairo              pkgs/main/linux-64::cairo-1.16.0-h19f5f5c_2\n","  fontconfig         pkgs/main/linux-64::fontconfig-2.13.1-h6c09931_0\n","  freetype           pkgs/main/linux-64::freetype-2.11.0-h70c0345_0\n","  giflib             pkgs/main/linux-64::giflib-5.2.1-h7b6447c_0\n","  glib               pkgs/main/linux-64::glib-2.69.1-h4ff587b_1\n","  icu                pkgs/main/linux-64::icu-58.2-he6710b0_3\n","  intel-openmp       pkgs/main/linux-64::intel-openmp-2021.4.0-h06a4308_3561\n","  jpeg               pkgs/main/linux-64::jpeg-9e-h7f8727e_0\n","  lcms2              pkgs/main/linux-64::lcms2-2.12-h3be6417_0\n","  libboost           pkgs/main/linux-64::libboost-1.73.0-h28710b8_12\n","  libpng             pkgs/main/linux-64::libpng-1.6.37-hbc83047_0\n","  libtiff            pkgs/main/linux-64::libtiff-4.2.0-h2818925_1\n","  libuuid            pkgs/main/linux-64::libuuid-1.0.3-h7f8727e_2\n","  libwebp            pkgs/main/linux-64::libwebp-1.2.2-h55f646e_0\n","  libwebp-base       pkgs/main/linux-64::libwebp-base-1.2.2-h7f8727e_0\n","  libxcb             pkgs/main/linux-64::libxcb-1.15-h7f8727e_0\n","  libxml2            pkgs/main/linux-64::libxml2-2.9.14-h74e7548_0\n","  lz4-c              pkgs/main/linux-64::lz4-c-1.9.3-h295c915_1\n","  mkl                pkgs/main/linux-64::mkl-2021.4.0-h06a4308_640\n","  mkl-service        pkgs/main/linux-64::mkl-service-2.4.0-py37h7f8727e_0\n","  mkl_fft            pkgs/main/linux-64::mkl_fft-1.3.1-py37hd3c417c_0\n","  mkl_random         pkgs/main/linux-64::mkl_random-1.2.2-py37h51133e4_0\n","  numexpr            pkgs/main/linux-64::numexpr-2.8.1-py37h6abb31d_0\n","  numpy              pkgs/main/linux-64::numpy-1.21.5-py37he7a7128_2\n","  numpy-base         pkgs/main/linux-64::numpy-base-1.21.5-py37hf524024_2\n","  packaging          pkgs/main/noarch::packaging-21.3-pyhd3eb1b0_0\n","  pandas             pkgs/main/linux-64::pandas-1.3.5-py37h8c16a72_0\n","  pcre               pkgs/main/linux-64::pcre-8.45-h295c915_0\n","  pillow             pkgs/main/linux-64::pillow-9.0.1-py37h22f2fdc_0\n","  pixman             pkgs/main/linux-64::pixman-0.40.0-h7f8727e_1\n","  py-boost           pkgs/main/linux-64::py-boost-1.73.0-py37h51133e4_12\n","  pyparsing          pkgs/main/noarch::pyparsing-3.0.4-pyhd3eb1b0_0\n","  python-dateutil    pkgs/main/noarch::python-dateutil-2.8.2-pyhd3eb1b0_0\n","  pytz               pkgs/main/linux-64::pytz-2022.1-py37h06a4308_0\n","  rdkit              rdkit/linux-64::rdkit-2020.09.1.0-py37hd50e099_1\n","  zstd               pkgs/main/linux-64::zstd-1.5.2-ha4553b6_0\n","\n","The following packages will be UPDATED:\n","\n","  ca-certificates                                2020.1.1-0 --> 2022.07.19-h06a4308_0\n","  certifi                                 2019.11.28-py37_0 --> 2022.6.15-py37h06a4308_0\n","  conda                                        4.8.2-py37_0 --> 4.13.0-py37h06a4308_0\n","  libffi                                   3.2.1-hd88cf55_4 --> 3.3-he6710b0_2\n","  openssl                                 1.1.1d-h7b6447c_4 --> 1.1.1q-h7f8727e_0\n","  xz                                       5.2.4-h14c3975_4 --> 5.2.5-h7f8727e_1\n","  zlib                                    1.2.11-h7b6447c_3 --> 1.2.12-h7f8727e_2\n","\n","\n","\n","Downloading and Extracting Packages\n","giflib-5.2.1         | 78 KB     | : 100% 1.0/1 [00:00<00:00, 11.70it/s]\n","libwebp-base-1.2.2   | 440 KB    | : 100% 1.0/1 [00:00<00:00, 18.16it/s]\n","mkl_random-1.2.2     | 287 KB    | : 100% 1.0/1 [00:00<00:00, 22.59it/s]\n","numpy-1.21.5         | 10 KB     | : 100% 1.0/1 [00:00<00:00, 22.09it/s]\n","zstd-1.5.2           | 488 KB    | : 100% 1.0/1 [00:00<00:00, 18.21it/s]\n","certifi-2022.6.15    | 153 KB    | : 100% 1.0/1 [00:00<00:00, 24.97it/s]\n","mkl-2021.4.0         | 142.6 MB  | : 100% 1.0/1 [00:05<00:00,  5.02s/it]              \n","intel-openmp-2021.4. | 4.2 MB    | : 100% 1.0/1 [00:00<00:00,  6.19it/s]\n","pillow-9.0.1         | 652 KB    | : 100% 1.0/1 [00:00<00:00, 13.34it/s]\n","pytz-2022.1          | 196 KB    | : 100% 1.0/1 [00:00<00:00,  4.03s/it]                \n","libwebp-1.2.2        | 80 KB     | : 100% 1.0/1 [00:00<00:00, 17.00it/s]\n","cairo-1.16.0         | 1.1 MB    | : 100% 1.0/1 [00:00<00:00, 13.59it/s]\n","jpeg-9e              | 240 KB    | : 100% 1.0/1 [00:00<00:00, 22.14it/s]\n","numpy-base-1.21.5    | 4.8 MB    | : 100% 1.0/1 [00:00<00:00,  4.19it/s]\n","libffi-3.3           | 50 KB     | : 100% 1.0/1 [00:00<00:00, 18.36it/s]\n","lz4-c-1.9.3          | 185 KB    | : 100% 1.0/1 [00:00<00:00, 18.78it/s]\n","pcre-8.45            | 207 KB    | : 100% 1.0/1 [00:00<00:00, 20.33it/s]\n","libxml2-2.9.14       | 718 KB    | : 100% 1.0/1 [00:00<00:00, 18.07it/s]\n","xz-5.2.5             | 339 KB    | : 100% 1.0/1 [00:00<00:00, 17.03it/s]\n","glib-2.69.1          | 1.7 MB    | : 100% 1.0/1 [00:00<00:00, 10.78it/s]\n","pixman-0.40.0        | 373 KB    | : 100% 1.0/1 [00:00<00:00, 21.40it/s]\n","ca-certificates-2022 | 124 KB    | : 100% 1.0/1 [00:00<00:00, 18.97it/s]\n","libboost-1.73.0      | 13.8 MB   | : 100% 1.0/1 [00:01<00:00,  1.51s/it]               \n","bzip2-1.0.8          | 78 KB     | : 100% 1.0/1 [00:00<00:00, 22.81it/s]\n","icu-58.2             | 10.5 MB   | : 100% 1.0/1 [00:00<00:00,  2.65it/s]               \n","conda-4.13.0         | 890 KB    | : 100% 1.0/1 [00:00<00:00, 10.77it/s]\n","fontconfig-2.13.1    | 250 KB    | : 100% 1.0/1 [00:00<00:00, 19.94it/s]\n","blas-1.0             | 6 KB      | : 100% 1.0/1 [00:00<00:00, 21.27it/s]\n","pandas-1.3.5         | 9.3 MB    | : 100% 1.0/1 [00:00<00:00,  9.99it/s]\n","zlib-1.2.12          | 106 KB    | : 100% 1.0/1 [00:00<00:00, 22.51it/s]\n","libpng-1.6.37        | 278 KB    | : 100% 1.0/1 [00:00<00:00, 20.49it/s]\n","numexpr-2.8.1        | 123 KB    | : 100% 1.0/1 [00:00<00:00, 23.33it/s]\n","openssl-1.1.1q       | 2.5 MB    | : 100% 1.0/1 [00:00<00:00,  7.54it/s]\n","libtiff-4.2.0        | 452 KB    | : 100% 1.0/1 [00:00<00:00, 18.13it/s]\n","freetype-2.11.0      | 618 KB    | : 100% 1.0/1 [00:00<00:00, 17.10it/s]\n","packaging-21.3       | 36 KB     | : 100% 1.0/1 [00:00<00:00, 24.19it/s]\n","mkl_fft-1.3.1        | 172 KB    | : 100% 1.0/1 [00:00<00:00, 22.07it/s]\n","bottleneck-1.3.4     | 126 KB    | : 100% 1.0/1 [00:00<00:00,  3.93it/s]               \n","libuuid-1.0.3        | 17 KB     | : 100% 1.0/1 [00:00<00:00, 26.16it/s]\n","python-dateutil-2.8. | 233 KB    | : 100% 1.0/1 [00:00<00:00, 21.64it/s]\n","libxcb-1.15          | 505 KB    | : 100% 1.0/1 [00:00<00:00, 14.80it/s]\n","rdkit-2020.09.1.0    | 25.8 MB   | : 100% 1.0/1 [00:05<00:00,  5.43s/it]\n","pyparsing-3.0.4      | 81 KB     | : 100% 1.0/1 [00:00<00:00, 13.66it/s]\n","lcms2-2.12           | 312 KB    | : 100% 1.0/1 [00:00<00:00, 16.00it/s]\n","py-boost-1.73.0      | 195 KB    | : 100% 1.0/1 [00:00<00:00,  5.85it/s]                \n","mkl-service-2.4.0    | 56 KB     | : 100% 1.0/1 [00:00<00:00, 24.95it/s]\n","Preparing transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n","Verifying transaction: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","Executing transaction: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n"]}]},{"cell_type":"markdown","metadata":{"id":"H661uGwCNFMC"},"source":["## **2. Delaney's solubility dataset**\n","\n","The original [Delaney's dataset](https://pubs.acs.org/doi/10.1021/ci034243x) available as a [Supplementary file](https://pubs.acs.org/doi/10.1021/ci034243x)$^4$. The full paper is entitled [ESOL:  Estimating Aqueous Solubility Directly from Molecular Structure](https://pubs.acs.org/doi/10.1021/ci034243x).$^1$"]},{"cell_type":"markdown","metadata":{"id":"s6o9QzQnNRVx"},"source":["### **2.1. Download the dataset**"]},{"cell_type":"code","metadata":{"id":"6KKvV74LM1it","outputId":"8cab36f7-61a8-4d7e-ca3a-d139864f4401","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415550700,"user_tz":300,"elapsed":233,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["#! wget https://pubs.acs.org/doi/suppl/10.1021/ci034243x/suppl_file/ci034243xsi20040112_053635.txt"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-08-13 18:32:30--  https://pubs.acs.org/doi/suppl/10.1021/ci034243x/suppl_file/ci034243xsi20040112_053635.txt\n","Resolving pubs.acs.org (pubs.acs.org)... 104.18.3.147, 104.18.2.147\n","Connecting to pubs.acs.org (pubs.acs.org)|104.18.3.147|:443... connected.\n","HTTP request sent, awaiting response... 503 Service Temporarily Unavailable\n","2022-08-13 18:32:30 ERROR 503: Service Temporarily Unavailable.\n","\n"]}]},{"cell_type":"code","metadata":{"id":"mBP_uaJZ710V","outputId":"c52dd5b8-d6fd-4e00-f470-7bcd3cf41061","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["#! wget https://raw.githubusercontent.com/dataprofessor/data/master/delaney.csv"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2020-04-11 04:11:51--  https://raw.githubusercontent.com/dataprofessor/data/master/delaney.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 58889 (58K) [text/plain]\n","Saving to: ‘delaney.csv’\n","\n","\rdelaney.csv           0%[                    ]       0  --.-KB/s               \rdelaney.csv         100%[===================>]  57.51K  --.-KB/s    in 0.02s   \n","\n","2020-04-11 04:11:51 (2.26 MB/s) - ‘delaney.csv’ saved [58889/58889]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PJGp_xenNYKy"},"source":["### **2.2. Read in the dataset**"]},{"cell_type":"code","metadata":{"id":"0ufiOpEbNooH","executionInfo":{"status":"ok","timestamp":1660415692859,"user_tz":300,"elapsed":208,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["import pandas as pd"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"nLS6bwiRNtuV","outputId":"6a7349fe-8de3-4391-dabb-494250bde0b2","colab":{"base_uri":"https://localhost:8080/","height":514},"executionInfo":{"status":"ok","timestamp":1660415699416,"user_tz":300,"elapsed":229,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["sol = pd.read_csv('/content/delaney.csv')\n","sol"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         Compound ID  measured log(solubility:mol/L)  \\\n","0          1,1,1,2-Tetrachloroethane                          -2.180   \n","1              1,1,1-Trichloroethane                          -2.000   \n","2          1,1,2,2-Tetrachloroethane                          -1.740   \n","3              1,1,2-Trichloroethane                          -1.480   \n","4     1,1,2-Trichlorotrifluoroethane                          -3.040   \n","...                              ...                             ...   \n","1139                     vamidothion                           1.144   \n","1140                     Vinclozolin                          -4.925   \n","1141                        Warfarin                          -3.893   \n","1142                        Xipamide                          -3.790   \n","1143                             XMC                          -2.581   \n","\n","      ESOL predicted log(solubility:mol/L)  \\\n","0                                   -2.794   \n","1                                   -2.232   \n","2                                   -2.549   \n","3                                   -1.961   \n","4                                   -3.077   \n","...                                    ...   \n","1139                                -1.446   \n","1140                                -4.377   \n","1141                                -3.913   \n","1142                                -3.642   \n","1143                                -2.688   \n","\n","                                           SMILES  \n","0                                  ClCC(Cl)(Cl)Cl  \n","1                                    CC(Cl)(Cl)Cl  \n","2                                  ClC(Cl)C(Cl)Cl  \n","3                                      ClCC(Cl)Cl  \n","4                             FC(F)(Cl)C(F)(Cl)Cl  \n","...                                           ...  \n","1139                 CNC(=O)C(C)SCCSP(=O)(OC)(OC)  \n","1140        CC1(OC(=O)N(C1=O)c2cc(Cl)cc(Cl)c2)C=C  \n","1141       CC(=O)CC(c1ccccc1)c3c(O)c2ccccc2oc3=O   \n","1142  Cc1cccc(C)c1NC(=O)c2cc(c(Cl)cc2O)S(N)(=O)=O  \n","1143                       CNC(=O)Oc1cc(C)cc(C)c1  \n","\n","[1144 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-e6d46c51-ad86-4b8c-a539-e29822bcc99d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Compound ID</th>\n","      <th>measured log(solubility:mol/L)</th>\n","      <th>ESOL predicted log(solubility:mol/L)</th>\n","      <th>SMILES</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1,1,1,2-Tetrachloroethane</td>\n","      <td>-2.180</td>\n","      <td>-2.794</td>\n","      <td>ClCC(Cl)(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1,1,1-Trichloroethane</td>\n","      <td>-2.000</td>\n","      <td>-2.232</td>\n","      <td>CC(Cl)(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1,1,2,2-Tetrachloroethane</td>\n","      <td>-1.740</td>\n","      <td>-2.549</td>\n","      <td>ClC(Cl)C(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1,1,2-Trichloroethane</td>\n","      <td>-1.480</td>\n","      <td>-1.961</td>\n","      <td>ClCC(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1,1,2-Trichlorotrifluoroethane</td>\n","      <td>-3.040</td>\n","      <td>-3.077</td>\n","      <td>FC(F)(Cl)C(F)(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1139</th>\n","      <td>vamidothion</td>\n","      <td>1.144</td>\n","      <td>-1.446</td>\n","      <td>CNC(=O)C(C)SCCSP(=O)(OC)(OC)</td>\n","    </tr>\n","    <tr>\n","      <th>1140</th>\n","      <td>Vinclozolin</td>\n","      <td>-4.925</td>\n","      <td>-4.377</td>\n","      <td>CC1(OC(=O)N(C1=O)c2cc(Cl)cc(Cl)c2)C=C</td>\n","    </tr>\n","    <tr>\n","      <th>1141</th>\n","      <td>Warfarin</td>\n","      <td>-3.893</td>\n","      <td>-3.913</td>\n","      <td>CC(=O)CC(c1ccccc1)c3c(O)c2ccccc2oc3=O</td>\n","    </tr>\n","    <tr>\n","      <th>1142</th>\n","      <td>Xipamide</td>\n","      <td>-3.790</td>\n","      <td>-3.642</td>\n","      <td>Cc1cccc(C)c1NC(=O)c2cc(c(Cl)cc2O)S(N)(=O)=O</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>XMC</td>\n","      <td>-2.581</td>\n","      <td>-2.688</td>\n","      <td>CNC(=O)Oc1cc(C)cc(C)c1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1144 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6d46c51-ad86-4b8c-a539-e29822bcc99d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e6d46c51-ad86-4b8c-a539-e29822bcc99d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e6d46c51-ad86-4b8c-a539-e29822bcc99d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"cUzImGPEXZRn"},"source":["### **2.3. Examining the SMILES data**"]},{"cell_type":"markdown","metadata":{"id":"gGDLzIZmN5sJ"},"source":["Chemical structures are encoded by a string of text known as **SMILES** which is an acronym for **Simplified Molecular-Input Line-Entry System**."]},{"cell_type":"code","metadata":{"id":"4pF777dmOOZ3","outputId":"befe0fb9-0579-4405-d72a-340d8c1bc735","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415728251,"user_tz":300,"elapsed":206,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["sol.SMILES"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0                                    ClCC(Cl)(Cl)Cl\n","1                                      CC(Cl)(Cl)Cl\n","2                                    ClC(Cl)C(Cl)Cl\n","3                                        ClCC(Cl)Cl\n","4                               FC(F)(Cl)C(F)(Cl)Cl\n","                           ...                     \n","1139                   CNC(=O)C(C)SCCSP(=O)(OC)(OC)\n","1140          CC1(OC(=O)N(C1=O)c2cc(Cl)cc(Cl)c2)C=C\n","1141         CC(=O)CC(c1ccccc1)c3c(O)c2ccccc2oc3=O \n","1142    Cc1cccc(C)c1NC(=O)c2cc(c(Cl)cc2O)S(N)(=O)=O\n","1143                         CNC(=O)Oc1cc(C)cc(C)c1\n","Name: SMILES, Length: 1144, dtype: object"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"qHlN5973X6bJ"},"source":["The first element from the **SMILES** column of the **sol** dataframe."]},{"cell_type":"code","metadata":{"id":"jN0dzq9dXF5N","outputId":"55e22f22-dc78-4628-bacb-b8a611b08d22","colab":{"base_uri":"https://localhost:8080/","height":37},"executionInfo":{"status":"ok","timestamp":1660415734752,"user_tz":300,"elapsed":201,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["sol.SMILES[0]"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'ClCC(Cl)(Cl)Cl'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"NO7tSBIeXQWk"},"source":["### **2.4. Convert a molecule from the SMILES string to an rdkit object**"]},{"cell_type":"code","metadata":{"id":"BmlrBL_MOTkB","executionInfo":{"status":"ok","timestamp":1660415741305,"user_tz":300,"elapsed":213,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["from rdkit import Chem"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"0f9JLRD0XO85","outputId":"767c274b-d24a-4a37-d273-b6e65efea44e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415755336,"user_tz":300,"elapsed":200,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Chem.MolFromSmiles(sol.SMILES[0])"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<rdkit.Chem.rdchem.Mol at 0x7fa0b6f75d50>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"rwfN-yZYEFof","outputId":"da010f69-bd9b-46d2-8732-92fa61255fa3","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Chem.MolFromSmiles('ClCC(Cl)(Cl)Cl')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<rdkit.Chem.rdchem.Mol at 0x7f66f2dce030>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"MCdX2GjXFG-A"},"source":["### **2.5. Working with rdkit object**"]},{"cell_type":"code","metadata":{"id":"8_6xQmjHFOo1","executionInfo":{"status":"ok","timestamp":1660415761171,"user_tz":300,"elapsed":217,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["m = Chem.MolFromSmiles('ClCC(Cl)(Cl)Cl')"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"3dn79-t4FLgT","outputId":"b30f4255-b286-4461-e4cf-4f933abac485","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415763104,"user_tz":300,"elapsed":198,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["m.GetNumAtoms()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"uqQLXGKQQAvX"},"source":["## **3. Calculate molecular descriptors in rdkit**"]},{"cell_type":"markdown","metadata":{"id":"iD_6apg8kYDy"},"source":["### **3.1. Convert list of molecules to rdkit object**"]},{"cell_type":"code","metadata":{"id":"bQjMv-wLOlmg","executionInfo":{"status":"ok","timestamp":1660415912042,"user_tz":300,"elapsed":256,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["from rdkit import Chem"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TyaEoBb5FiKc"},"source":["#### **3.1.1. Method 1**"]},{"cell_type":"code","metadata":{"id":"JisoMYFgka_p","executionInfo":{"status":"ok","timestamp":1660415933152,"user_tz":300,"elapsed":227,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["mol_list= []\n","for element in sol.SMILES:\n","  mol = Chem.MolFromSmiles(element)\n","  mol_list.append(mol)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZL7fG5Aok0Gh","outputId":"64847243-d99f-4203-e117-b012c4791540","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415935323,"user_tz":300,"elapsed":3,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["len(mol_list)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1144"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"WiGYdtPUk3hV","outputId":"aef72802-0acd-46ec-fb27-0d9528b7e01c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660415938474,"user_tz":300,"elapsed":247,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["mol_list[:5]"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<rdkit.Chem.rdchem.Mol at 0x7fa0b6f78bc0>,\n"," <rdkit.Chem.rdchem.Mol at 0x7fa0b6f783a0>,\n"," <rdkit.Chem.rdchem.Mol at 0x7fa0b6f78800>,\n"," <rdkit.Chem.rdchem.Mol at 0x7fa0b6f787b0>,\n"," <rdkit.Chem.rdchem.Mol at 0x7fa0b6f786c0>]"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"-rBxrxF8Fk5S"},"source":["#### **3.1.2. Method 2**"]},{"cell_type":"code","metadata":{"id":"AaHAVM2yFm3J"},"source":["mol_list2 = [Chem.MolFromSmiles(element) for element in sol.SMILES]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fw5BCeh7F2c9","outputId":"cb79735b-e691-4d01-ff4e-f41ed55a130e","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(mol_list2)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1144"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"uASSo7ZMF5iv","outputId":"846333e8-5c46-49ee-8746-3a260b830f59","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["mol_list2[:5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<rdkit.Chem.rdchem.Mol at 0x7f66edb6d2b0>,\n"," <rdkit.Chem.rdchem.Mol at 0x7f66edb6d3f0>,\n"," <rdkit.Chem.rdchem.Mol at 0x7f66ed9406c0>,\n"," <rdkit.Chem.rdchem.Mol at 0x7f66ed940350>,\n"," <rdkit.Chem.rdchem.Mol at 0x7f66ed940580>]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"olyPX1TjQMvr"},"source":["### **3.2. Calculate molecular descriptors**\n","\n","To predict **LogS** (log of the aqueous solubility), the study by Delaney makes use of 4 molecular descriptors:\n","1. **cLogP** *(Octanol-water partition coefficient)*\n","2. **MW** *(Molecular weight)*\n","3. **RB** *(Number of rotatable bonds)*\n","4. **AP** *(Aromatic proportion = number of aromatic atoms / total number of heavy atoms)*\n","\n","Unfortunately, rdkit readily computes the first 3. As for the AP descriptor, we will calculate this by manually computing the ratio of the *number of aromatic atoms* to the *total number of heavy atoms* which rdkit can compute."]},{"cell_type":"markdown","metadata":{"id":"k4fqhekzCB-X"},"source":["#### **3.2.1. LogP, MW and RB**"]},{"cell_type":"code","metadata":{"id":"iS4w5r5ocxT8","executionInfo":{"status":"ok","timestamp":1660416282187,"user_tz":300,"elapsed":224,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["import numpy as np\n","from rdkit.Chem import Descriptors"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"WkNMPVu_giw8","executionInfo":{"status":"ok","timestamp":1660416283698,"user_tz":300,"elapsed":215,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["# Inspired by: https://codeocean.com/explore/capsules?query=tag:data-curation\n","\n","def generate(smiles, verbose=False):\n","\n","    moldata= []\n","    for elem in smiles:\n","        mol=Chem.MolFromSmiles(elem) \n","        moldata.append(mol)\n","       \n","    baseData= np.arange(1,1)\n","    i=0  \n","    for mol in moldata:        \n","       \n","        desc_MolLogP = Descriptors.MolLogP(mol)\n","        desc_MolWt = Descriptors.MolWt(mol)\n","        desc_NumRotatableBonds = Descriptors.NumRotatableBonds(mol)\n","           \n","        row = np.array([desc_MolLogP,\n","                        desc_MolWt,\n","                        desc_NumRotatableBonds])   \n","    \n","        if(i==0):\n","            baseData=row\n","        else:\n","            baseData=np.vstack([baseData, row])\n","        i=i+1      \n","    \n","    columnNames=[\"MolLogP\",\"MolWt\",\"NumRotatableBonds\"]   \n","    descriptors = pd.DataFrame(data=baseData,columns=columnNames)\n","    \n","    return descriptors"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"MzMulCVvcf59","outputId":"45dc38e6-ad82-4281-ced4-49db9fc86fc9","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1660416286111,"user_tz":300,"elapsed":476,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["df = generate(sol.SMILES)\n","df"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      MolLogP    MolWt  NumRotatableBonds\n","0     2.59540  167.850                0.0\n","1     2.37650  133.405                0.0\n","2     2.59380  167.850                1.0\n","3     2.02890  133.405                1.0\n","4     2.91890  187.375                1.0\n","...       ...      ...                ...\n","1139  1.98820  287.343                8.0\n","1140  3.42130  286.114                2.0\n","1141  3.60960  308.333                4.0\n","1142  2.56214  354.815                3.0\n","1143  2.02164  179.219                1.0\n","\n","[1144 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-8c73bb5d-c31c-477d-b8d1-f7352d32e1bf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolLogP</th>\n","      <th>MolWt</th>\n","      <th>NumRotatableBonds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.59540</td>\n","      <td>167.850</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.37650</td>\n","      <td>133.405</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.59380</td>\n","      <td>167.850</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.02890</td>\n","      <td>133.405</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.91890</td>\n","      <td>187.375</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1139</th>\n","      <td>1.98820</td>\n","      <td>287.343</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>1140</th>\n","      <td>3.42130</td>\n","      <td>286.114</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1141</th>\n","      <td>3.60960</td>\n","      <td>308.333</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1142</th>\n","      <td>2.56214</td>\n","      <td>354.815</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>2.02164</td>\n","      <td>179.219</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1144 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c73bb5d-c31c-477d-b8d1-f7352d32e1bf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8c73bb5d-c31c-477d-b8d1-f7352d32e1bf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8c73bb5d-c31c-477d-b8d1-f7352d32e1bf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"XtlGQy82OiCm"},"source":["#### **3.2.2. Aromatic proportion**"]},{"cell_type":"markdown","metadata":{"id":"YVK5WqOYSmY8"},"source":["##### 3.2.1.1. Number of aromatic atoms\n","\n","Here, we will create a custom function to calculate the **Number of aromatic atoms**. With this descriptor we can use it to subsequently calculate the AP descriptor."]},{"cell_type":"markdown","metadata":{"id":"xcw9oaPR4NM1"},"source":["Computing for a single molecule."]},{"cell_type":"code","metadata":{"id":"1fJVXNHCSfLk"},"source":["m = Chem.MolFromSmiles('COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FENb_2BkYyVq","outputId":"5d93cc1d-4761-43a1-acfd-0adb9b119d41","colab":{"base_uri":"https://localhost:8080/","height":595}},"source":["aromatic_atoms = [m.GetAtomWithIdx(i).GetIsAromatic() for i in range(m.GetNumAtoms())]\n","aromatic_atoms"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[False,\n"," False,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," False,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," True,\n"," False,\n"," False,\n"," True,\n"," True]"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"nIF7IrIlcGPD","executionInfo":{"status":"ok","timestamp":1660416412091,"user_tz":300,"elapsed":231,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["def AromaticAtoms(m):\n","  aromatic_atoms = [m.GetAtomWithIdx(i).GetIsAromatic() for i in range(m.GetNumAtoms())]\n","  aa_count = []\n","  for i in aromatic_atoms:\n","    if i==True:\n","      aa_count.append(1)\n","  sum_aa_count = sum(aa_count)\n","  return sum_aa_count"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"PK-RJ-dpbqhn","outputId":"113a2b37-e6a8-4c45-fa19-7acaaf903988","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416414762,"user_tz":300,"elapsed":223,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["AromaticAtoms(m)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"-uywPiwe4O31"},"source":["Computing for molecules in the entire dataset."]},{"cell_type":"code","metadata":{"id":"jCeydvky4Rgl","outputId":"9358487f-84b0-4dab-fd99-4bce7ea0144c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416423723,"user_tz":300,"elapsed":218,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["desc_AromaticAtoms = [AromaticAtoms(element) for element in mol_list]\n","desc_AromaticAtoms"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 10,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 10,\n"," 6,\n"," 0,\n"," 10,\n"," 0,\n"," 14,\n"," 0,\n"," 0,\n"," 14,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 0,\n"," 12,\n"," 10,\n"," 14,\n"," 6,\n"," 10,\n"," 10,\n"," 10,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 0,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 0,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 6,\n"," 6,\n"," 12,\n"," 12,\n"," 6,\n"," 0,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 6,\n"," 12,\n"," 12,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 12,\n"," 6,\n"," 10,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 10,\n"," 14,\n"," 10,\n"," 10,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 12,\n"," 0,\n"," 10,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 6,\n"," 0,\n"," 6,\n"," 10,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 14,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 0,\n"," 14,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 0,\n"," 10,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 6,\n"," 12,\n"," 6,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 18,\n"," 0,\n"," 9,\n"," 0,\n"," 6,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 12,\n"," 12,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 10,\n"," 0,\n"," 0,\n"," 12,\n"," 0,\n"," 10,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 18,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 10,\n"," 0,\n"," 18,\n"," 6,\n"," 0,\n"," 18,\n"," 10,\n"," 10,\n"," 18,\n"," 18,\n"," 10,\n"," 10,\n"," 10,\n"," 14,\n"," 14,\n"," 14,\n"," 12,\n"," 10,\n"," 10,\n"," 0,\n"," 0,\n"," 6,\n"," 5,\n"," 0,\n"," 6,\n"," 11,\n"," 14,\n"," 0,\n"," 0,\n"," 9,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 9,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 11,\n"," 5,\n"," 12,\n"," 5,\n"," 0,\n"," 11,\n"," 12,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 14,\n"," 12,\n"," 11,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 0,\n"," 6,\n"," 0,\n"," 12,\n"," 6,\n"," 6,\n"," 12,\n"," 9,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 11,\n"," 16,\n"," 20,\n"," 20,\n"," 16,\n"," 20,\n"," 20,\n"," 20,\n"," 22,\n"," 6,\n"," 12,\n"," 6,\n"," 12,\n"," 9,\n"," 9,\n"," 9,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 12,\n"," 12,\n"," 20,\n"," 0,\n"," 6,\n"," 28,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 12,\n"," 6,\n"," 12,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 5,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 9,\n"," 0,\n"," 0,\n"," 0,\n"," 12,\n"," 10,\n"," 13,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 12,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 6,\n"," 10,\n"," 12,\n"," 6,\n"," 9,\n"," 18,\n"," 18,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 12,\n"," 24,\n"," 0,\n"," 0,\n"," 0,\n"," 16,\n"," 10,\n"," 16,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 12,\n"," 12,\n"," 12,\n"," 6,\n"," 5,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 0,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 12,\n"," 6,\n"," 13,\n"," 13,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 12,\n"," 12,\n"," 0,\n"," 12,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 12,\n"," 12,\n"," 12,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 11,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 9,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 10,\n"," 6,\n"," 12,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 9,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 18,\n"," 11,\n"," 12,\n"," 0,\n"," 6,\n"," 18,\n"," 11,\n"," 6,\n"," 6,\n"," 12,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 16,\n"," 18,\n"," 6,\n"," 0,\n"," 0,\n"," 12,\n"," 6,\n"," 16,\n"," 12,\n"," 6,\n"," 0,\n"," 6,\n"," 18,\n"," 6,\n"," 17,\n"," 18,\n"," 6,\n"," 0,\n"," 0,\n"," 5,\n"," 5,\n"," 0,\n"," 16,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 9,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 12,\n"," 6,\n"," 0,\n"," 12,\n"," 12,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 9,\n"," 6,\n"," 12,\n"," 9,\n"," 9,\n"," 6,\n"," 9,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 5,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 11,\n"," 6,\n"," 9,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 10,\n"," 6,\n"," 12,\n"," 0,\n"," 13,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 12,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 15,\n"," 0,\n"," 0,\n"," 0,\n"," 15,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 9,\n"," 6,\n"," 0,\n"," 0,\n"," 16,\n"," 0,\n"," 11,\n"," 6,\n"," 0,\n"," 6,\n"," 13,\n"," 12,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 12,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 5,\n"," 6,\n"," 5,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 16,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 10,\n"," 18,\n"," 10,\n"," 6,\n"," 0,\n"," 6,\n"," 12,\n"," 12,\n"," 6,\n"," 6,\n"," 5,\n"," 12,\n"," 5,\n"," 6,\n"," 6,\n"," 12,\n"," 6,\n"," 0,\n"," 12,\n"," 5,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 24,\n"," 0,\n"," 0,\n"," 0,\n"," 12,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 10,\n"," 6,\n"," 11,\n"," 0,\n"," 12,\n"," 6,\n"," 6,\n"," 12,\n"," 12,\n"," 12,\n"," 12,\n"," 6,\n"," 0,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 12,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 12,\n"," 12,\n"," 20,\n"," 6,\n"," 6,\n"," 14,\n"," 14,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 18,\n"," 12,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 0,\n"," 9,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 22,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 12,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 6,\n"," 12,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 6,\n"," 0,\n"," 6,\n"," 6,\n"," 0,\n"," 11,\n"," 0,\n"," 0,\n"," 6,\n"," 0,\n"," 0,\n"," 0,\n"," 0,\n"," 6,\n"," ...]"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"rXGyuCnbOplQ"},"source":["##### 3.2.1.2. **Number of heavy atoms**\n","\n","Here, we will use an existing function for calculating the Number of heavy atoms."]},{"cell_type":"markdown","metadata":{"id":"Wgf1teHz3_pP"},"source":["Computing for a single molecule."]},{"cell_type":"code","metadata":{"id":"jVwvt02AOvhv","outputId":"47d87b79-001a-4089-fe80-f0a123782e7f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416437945,"user_tz":300,"elapsed":211,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["m = Chem.MolFromSmiles('COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21')\n","Descriptors.HeavyAtomCount(m)"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["34"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"Pv_BJcjA4HPz"},"source":["Computing for molecules in the entire dataset."]},{"cell_type":"code","metadata":{"id":"m9nsQqIkOuIU","outputId":"582fc9c4-5345-4fc6-d897-246824bb62a3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416443701,"user_tz":300,"elapsed":223,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["desc_HeavyAtomCount = [Descriptors.HeavyAtomCount(element) for element in mol_list]\n","desc_HeavyAtomCount"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[6,\n"," 5,\n"," 6,\n"," 5,\n"," 8,\n"," 4,\n"," 4,\n"," 8,\n"," 10,\n"," 10,\n"," 10,\n"," 9,\n"," 9,\n"," 10,\n"," 10,\n"," 10,\n"," 9,\n"," 9,\n"," 9,\n"," 8,\n"," 8,\n"," 4,\n"," 8,\n"," 4,\n"," 5,\n"," 8,\n"," 8,\n"," 10,\n"," 12,\n"," 4,\n"," 9,\n"," 9,\n"," 9,\n"," 15,\n"," 8,\n"," 4,\n"," 8,\n"," 8,\n"," 5,\n"," 8,\n"," 8,\n"," 12,\n"," 12,\n"," 8,\n"," 6,\n"," 8,\n"," 8,\n"," 10,\n"," 8,\n"," 12,\n"," 12,\n"," 5,\n"," 12,\n"," 6,\n"," 14,\n"," 11,\n"," 22,\n"," 15,\n"," 5,\n"," 5,\n"," 8,\n"," 7,\n"," 11,\n"," 9,\n"," 6,\n"," 4,\n"," 5,\n"," 4,\n"," 4,\n"," 4,\n"," 5,\n"," 5,\n"," 8,\n"," 7,\n"," 11,\n"," 6,\n"," 4,\n"," 11,\n"," 10,\n"," 13,\n"," 12,\n"," 8,\n"," 7,\n"," 7,\n"," 17,\n"," 7,\n"," 6,\n"," 7,\n"," 6,\n"," 5,\n"," 8,\n"," 11,\n"," 4,\n"," 7,\n"," 14,\n"," 11,\n"," 15,\n"," 9,\n"," 11,\n"," 11,\n"," 13,\n"," 6,\n"," 10,\n"," 9,\n"," 9,\n"," 19,\n"," 9,\n"," 8,\n"," 8,\n"," 16,\n"," 6,\n"," 5,\n"," 5,\n"," 9,\n"," 4,\n"," 15,\n"," 22,\n"," 20,\n"," 18,\n"," 20,\n"," 18,\n"," 16,\n"," 19,\n"," 19,\n"," 18,\n"," 17,\n"," 17,\n"," 18,\n"," 16,\n"," 7,\n"," 18,\n"," 18,\n"," 16,\n"," 17,\n"," 8,\n"," 9,\n"," 16,\n"," 7,\n"," 6,\n"," 7,\n"," 8,\n"," 6,\n"," 14,\n"," 18,\n"," 19,\n"," 18,\n"," 17,\n"," 17,\n"," 16,\n"," 11,\n"," 11,\n"," 15,\n"," 15,\n"," 10,\n"," 8,\n"," 11,\n"," 15,\n"," 10,\n"," 10,\n"," 11,\n"," 9,\n"," 6,\n"," 6,\n"," 12,\n"," 7,\n"," 8,\n"," 15,\n"," 15,\n"," 10,\n"," 15,\n"," 10,\n"," 10,\n"," 16,\n"," 9,\n"," 8,\n"," 8,\n"," 8,\n"," 7,\n"," 9,\n"," 8,\n"," 13,\n"," 14,\n"," 14,\n"," 9,\n"," 12,\n"," 9,\n"," 8,\n"," 13,\n"," 14,\n"," 12,\n"," 15,\n"," 11,\n"," 11,\n"," 4,\n"," 8,\n"," 5,\n"," 5,\n"," 8,\n"," 6,\n"," 9,\n"," 13,\n"," 5,\n"," 11,\n"," 8,\n"," 4,\n"," 8,\n"," 6,\n"," 11,\n"," 8,\n"," 7,\n"," 9,\n"," 9,\n"," 7,\n"," 9,\n"," 12,\n"," 9,\n"," 8,\n"," 8,\n"," 7,\n"," 7,\n"," 11,\n"," 7,\n"," 4,\n"," 10,\n"," 12,\n"," 5,\n"," 5,\n"," 5,\n"," 6,\n"," 9,\n"," 8,\n"," 7,\n"," 7,\n"," 15,\n"," 6,\n"," 5,\n"," 6,\n"," 8,\n"," 11,\n"," 6,\n"," 7,\n"," 15,\n"," 8,\n"," 5,\n"," 4,\n"," 4,\n"," 11,\n"," 6,\n"," 11,\n"," 6,\n"," 10,\n"," 10,\n"," 9,\n"," 9,\n"," 6,\n"," 6,\n"," 10,\n"," 4,\n"," 6,\n"," 12,\n"," 7,\n"," 7,\n"," 7,\n"," 7,\n"," 11,\n"," 9,\n"," 9,\n"," 8,\n"," 14,\n"," 9,\n"," 9,\n"," 8,\n"," 26,\n"," 9,\n"," 13,\n"," 8,\n"," 5,\n"," 24,\n"," 8,\n"," 8,\n"," 29,\n"," 7,\n"," 7,\n"," 28,\n"," 6,\n"," 5,\n"," 6,\n"," 6,\n"," 7,\n"," 7,\n"," 7,\n"," 9,\n"," 8,\n"," 7,\n"," 6,\n"," 21,\n"," 8,\n"," 10,\n"," 6,\n"," 8,\n"," 9,\n"," 30,\n"," 6,\n"," 6,\n"," 27,\n"," 25,\n"," 14,\n"," 8,\n"," 8,\n"," 9,\n"," 8,\n"," 8,\n"," 9,\n"," 8,\n"," 8,\n"," 14,\n"," 7,\n"," 10,\n"," 12,\n"," 7,\n"," 7,\n"," 13,\n"," 7,\n"," 11,\n"," 13,\n"," 6,\n"," 16,\n"," 17,\n"," 15,\n"," 15,\n"," 11,\n"," 11,\n"," 20,\n"," 14,\n"," 15,\n"," 13,\n"," 18,\n"," 16,\n"," 14,\n"," 17,\n"," 9,\n"," 11,\n"," 12,\n"," 19,\n"," 9,\n"," 10,\n"," 19,\n"," 11,\n"," 12,\n"," 19,\n"," 20,\n"," 12,\n"," 11,\n"," 11,\n"," 16,\n"," 15,\n"," 15,\n"," 27,\n"," 12,\n"," 12,\n"," 10,\n"," 4,\n"," 10,\n"," 13,\n"," 3,\n"," 9,\n"," 20,\n"," 14,\n"," 4,\n"," 4,\n"," 10,\n"," 22,\n"," 18,\n"," 26,\n"," 18,\n"," 11,\n"," 9,\n"," 10,\n"," 10,\n"," 20,\n"," 15,\n"," 15,\n"," 32,\n"," 15,\n"," 17,\n"," 6,\n"," 22,\n"," 6,\n"," 16,\n"," 15,\n"," 19,\n"," 21,\n"," 21,\n"," 11,\n"," 7,\n"," 21,\n"," 8,\n"," 14,\n"," 16,\n"," 14,\n"," 22,\n"," 26,\n"," 15,\n"," 14,\n"," 16,\n"," 14,\n"," 14,\n"," 16,\n"," 13,\n"," 27,\n"," 23,\n"," 28,\n"," 16,\n"," 21,\n"," 23,\n"," 8,\n"," 9,\n"," 6,\n"," 14,\n"," 19,\n"," 17,\n"," 20,\n"," 20,\n"," 17,\n"," 20,\n"," 20,\n"," 20,\n"," 22,\n"," 12,\n"," 16,\n"," 8,\n"," 14,\n"," 9,\n"," 9,\n"," 9,\n"," 8,\n"," 10,\n"," 11,\n"," 34,\n"," 14,\n"," 12,\n"," 20,\n"," 11,\n"," 14,\n"," 35,\n"," 7,\n"," 3,\n"," 4,\n"," 3,\n"," 2,\n"," 16,\n"," 22,\n"," 11,\n"," 15,\n"," 21,\n"," 15,\n"," 19,\n"," 21,\n"," 17,\n"," 14,\n"," 5,\n"," 4,\n"," 5,\n"," 15,\n"," 17,\n"," 16,\n"," 7,\n"," 14,\n"," 10,\n"," 5,\n"," 14,\n"," 11,\n"," 7,\n"," 18,\n"," 16,\n"," 15,\n"," 13,\n"," 17,\n"," 16,\n"," 18,\n"," 16,\n"," 12,\n"," 11,\n"," 11,\n"," 17,\n"," 20,\n"," 17,\n"," 15,\n"," 15,\n"," 18,\n"," 16,\n"," 13,\n"," 27,\n"," 5,\n"," 4,\n"," 7,\n"," 4,\n"," 3,\n"," 3,\n"," 14,\n"," 7,\n"," 22,\n"," 14,\n"," 17,\n"," 14,\n"," 20,\n"," 18,\n"," 14,\n"," 22,\n"," 14,\n"," 11,\n"," 20,\n"," 18,\n"," 4,\n"," 8,\n"," 5,\n"," 11,\n"," 16,\n"," 22,\n"," 24,\n"," 25,\n"," 26,\n"," 29,\n"," 24,\n"," 22,\n"," 22,\n"," 16,\n"," 14,\n"," 17,\n"," 12,\n"," 7,\n"," 8,\n"," 7,\n"," 15,\n"," 6,\n"," 7,\n"," 7,\n"," 6,\n"," 20,\n"," 14,\n"," 8,\n"," 9,\n"," 16,\n"," 5,\n"," 5,\n"," 13,\n"," 11,\n"," 14,\n"," 29,\n"," 31,\n"," 28,\n"," 8,\n"," 25,\n"," 17,\n"," 18,\n"," 18,\n"," 19,\n"," 10,\n"," 17,\n"," 28,\n"," 24,\n"," 27,\n"," 22,\n"," 28,\n"," 31,\n"," 11,\n"," 28,\n"," 23,\n"," 23,\n"," 15,\n"," 20,\n"," 19,\n"," 13,\n"," 13,\n"," 3,\n"," 9,\n"," 22,\n"," 20,\n"," 17,\n"," 3,\n"," 17,\n"," 20,\n"," 19,\n"," 20,\n"," 20,\n"," 5,\n"," 16,\n"," 5,\n"," 6,\n"," 20,\n"," 21,\n"," 21,\n"," 54,\n"," 55,\n"," 24,\n"," 3,\n"," 28,\n"," 7,\n"," 7,\n"," 18,\n"," 23,\n"," 15,\n"," 15,\n"," 5,\n"," 14,\n"," 3,\n"," 4,\n"," 22,\n"," 17,\n"," 12,\n"," 7,\n"," 28,\n"," 30,\n"," 16,\n"," 18,\n"," 13,\n"," 13,\n"," 13,\n"," 7,\n"," 16,\n"," 14,\n"," 19,\n"," 14,\n"," 10,\n"," 14,\n"," 13,\n"," 18,\n"," 20,\n"," 19,\n"," 21,\n"," 21,\n"," 20,\n"," 20,\n"," 21,\n"," 8,\n"," 20,\n"," 11,\n"," 21,\n"," 20,\n"," 23,\n"," 2,\n"," 3,\n"," 3,\n"," 22,\n"," 15,\n"," 19,\n"," 15,\n"," 23,\n"," 19,\n"," 19,\n"," 16,\n"," 6,\n"," 11,\n"," 10,\n"," 13,\n"," 14,\n"," 5,\n"," 11,\n"," 10,\n"," 13,\n"," 12,\n"," 9,\n"," 7,\n"," 6,\n"," 5,\n"," 8,\n"," 8,\n"," 2,\n"," 12,\n"," 12,\n"," 2,\n"," 28,\n"," 18,\n"," 42,\n"," 11,\n"," 12,\n"," 22,\n"," 15,\n"," 17,\n"," 17,\n"," 22,\n"," 26,\n"," 18,\n"," 16,\n"," 12,\n"," 22,\n"," 33,\n"," 9,\n"," 27,\n"," 29,\n"," 28,\n"," 16,\n"," 16,\n"," 13,\n"," 7,\n"," 27,\n"," 16,\n"," 24,\n"," 19,\n"," 22,\n"," 35,\n"," 16,\n"," 14,\n"," 12,\n"," 5,\n"," 7,\n"," 19,\n"," 26,\n"," 12,\n"," 16,\n"," 6,\n"," 15,\n"," 24,\n"," 9,\n"," 11,\n"," 7,\n"," 22,\n"," 17,\n"," 7,\n"," 10,\n"," 8,\n"," 26,\n"," 16,\n"," 12,\n"," 6,\n"," 20,\n"," 12,\n"," 7,\n"," 14,\n"," 16,\n"," 17,\n"," 26,\n"," 29,\n"," 17,\n"," 24,\n"," 10,\n"," 9,\n"," 24,\n"," 9,\n"," 9,\n"," 9,\n"," 19,\n"," 7,\n"," 3,\n"," 16,\n"," 2,\n"," 11,\n"," 16,\n"," 18,\n"," 8,\n"," 7,\n"," 10,\n"," 13,\n"," 17,\n"," 22,\n"," 11,\n"," 10,\n"," 9,\n"," 8,\n"," 10,\n"," 14,\n"," 22,\n"," 7,\n"," 6,\n"," 9,\n"," 15,\n"," 10,\n"," 20,\n"," 24,\n"," 21,\n"," 19,\n"," 23,\n"," 10,\n"," 17,\n"," 11,\n"," 12,\n"," 15,\n"," 21,\n"," 29,\n"," 19,\n"," 11,\n"," 23,\n"," 12,\n"," 8,\n"," 8,\n"," 8,\n"," 10,\n"," 22,\n"," 19,\n"," 14,\n"," 25,\n"," 21,\n"," 20,\n"," 28,\n"," 13,\n"," 11,\n"," 11,\n"," 15,\n"," 10,\n"," 20,\n"," 1,\n"," 2,\n"," 19,\n"," 14,\n"," 16,\n"," 17,\n"," 22,\n"," 18,\n"," 16,\n"," 21,\n"," 5,\n"," 6,\n"," 10,\n"," 6,\n"," 8,\n"," 13,\n"," 4,\n"," 13,\n"," 9,\n"," 3,\n"," 15,\n"," 10,\n"," 12,\n"," 11,\n"," 8,\n"," 6,\n"," 5,\n"," 6,\n"," 7,\n"," 6,\n"," 20,\n"," 11,\n"," 25,\n"," 9,\n"," 19,\n"," 24,\n"," 11,\n"," 15,\n"," 12,\n"," 14,\n"," 12,\n"," 8,\n"," 15,\n"," 22,\n"," 8,\n"," 10,\n"," 10,\n"," 10,\n"," 14,\n"," 31,\n"," 13,\n"," 22,\n"," 8,\n"," 11,\n"," 6,\n"," 9,\n"," 13,\n"," 20,\n"," 18,\n"," 10,\n"," 17,\n"," 11,\n"," 9,\n"," 20,\n"," 21,\n"," 9,\n"," 25,\n"," 11,\n"," 22,\n"," 14,\n"," 22,\n"," 11,\n"," 21,\n"," 9,\n"," 5,\n"," 18,\n"," 17,\n"," 15,\n"," 4,\n"," 8,\n"," 9,\n"," 39,\n"," 16,\n"," 25,\n"," 23,\n"," 20,\n"," 18,\n"," 8,\n"," 8,\n"," 8,\n"," 8,\n"," 10,\n"," 8,\n"," 6,\n"," 8,\n"," 10,\n"," 9,\n"," 10,\n"," 11,\n"," 10,\n"," 10,\n"," 23,\n"," 18,\n"," 8,\n"," 22,\n"," 14,\n"," 20,\n"," 18,\n"," 8,\n"," 24,\n"," 14,\n"," 18,\n"," 18,\n"," 8,\n"," 8,\n"," 18,\n"," 14,\n"," 11,\n"," 8,\n"," 11,\n"," 8,\n"," 8,\n"," 8,\n"," 10,\n"," 8,\n"," 13,\n"," 23,\n"," 11,\n"," 7,\n"," 12,\n"," 11,\n"," 5,\n"," 16,\n"," 9,\n"," 9,\n"," 11,\n"," 10,\n"," 24,\n"," 26,\n"," 20,\n"," 11,\n"," 13,\n"," 14,\n"," 14,\n"," 9,\n"," 22,\n"," 17,\n"," 7,\n"," 24,\n"," 26,\n"," 23,\n"," 8,\n"," 8,\n"," 10,\n"," 19,\n"," 13,\n"," 21,\n"," 19,\n"," 11,\n"," 11,\n"," 10,\n"," 11,\n"," 9,\n"," 22,\n"," 21,\n"," 11,\n"," 21,\n"," 17,\n"," 23,\n"," 10,\n"," 8,\n"," 10,\n"," 11,\n"," 10,\n"," 10,\n"," 13,\n"," 21,\n"," 26,\n"," 29,\n"," 23,\n"," 16,\n"," 14,\n"," 18,\n"," 23,\n"," 16,\n"," 16,\n"," 14,\n"," 3,\n"," 13,\n"," 15,\n"," 17,\n"," 22,\n"," 4,\n"," 4,\n"," 15,\n"," 7,\n"," 7,\n"," 6,\n"," 8,\n"," 9,\n"," ...]"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"iFDGqPQPQYZb"},"source":["##### **3.2.1.3. Computing the Aromatic Proportion (AP) descriptor**"]},{"cell_type":"markdown","metadata":{"id":"0xVXJIre5-HC"},"source":["Computing for a single molecule."]},{"cell_type":"code","metadata":{"id":"fZAwtZTM5WHU","outputId":"cb96a78d-cd73-4e65-b0dd-0e35e1932986","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416452575,"user_tz":300,"elapsed":233,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["m = Chem.MolFromSmiles('COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21')\n","AromaticAtoms(m)/Descriptors.HeavyAtomCount(m)"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5588235294117647"]},"metadata":{},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"JsHdN1ui6BBo"},"source":["Computing for molecules in the entire dataset."]},{"cell_type":"code","metadata":{"id":"DogBBjDu4-mI","outputId":"78e9d158-af97-4fcf-9c49-0042288bb522","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416455164,"user_tz":300,"elapsed":216,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["desc_AromaticProportion = [AromaticAtoms(element)/Descriptors.HeavyAtomCount(element) for element in mol_list]\n","desc_AromaticProportion"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.6,\n"," 0.6,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.6,\n"," 0.6,\n"," 0.6,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.75,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.5,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.4,\n"," 0.75,\n"," 0.0,\n"," 0.75,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.8333333333333334,\n"," 0.5,\n"," 0.75,\n"," 0.0,\n"," 0.75,\n"," 0.75,\n"," 0.6,\n"," 0.75,\n"," 0.8333333333333334,\n"," 0.5,\n"," 0.0,\n"," 0.8333333333333334,\n"," 0.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.9333333333333333,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.8333333333333334,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.0,\n"," 0.8571428571428571,\n"," 0.9090909090909091,\n"," 0.9333333333333333,\n"," 0.6666666666666666,\n"," 0.9090909090909091,\n"," 0.9090909090909091,\n"," 0.7692307692307693,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.6,\n"," 0.6666666666666666,\n"," 0.6,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.631578947368421,\n"," 0.631578947368421,\n"," 0.6666666666666666,\n"," 0.7058823529411765,\n"," 0.7058823529411765,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.7058823529411765,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.8571428571428571,\n"," 0.6666666666666666,\n"," 0.631578947368421,\n"," 0.6666666666666666,\n"," 0.7058823529411765,\n"," 0.7058823529411765,\n"," 0.75,\n"," 0.5454545454545454,\n"," 0.5454545454545454,\n"," 0.8,\n"," 0.8,\n"," 0.6,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.8,\n"," 0.6,\n"," 0.6,\n"," 0.5454545454545454,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.0,\n"," 0.8333333333333334,\n"," 0.0,\n"," 0.75,\n"," 0.8,\n"," 0.8,\n"," 0.6,\n"," 0.8,\n"," 0.6,\n"," 0.6,\n"," 0.375,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.46153846153846156,\n"," 0.8571428571428571,\n"," 0.8571428571428571,\n"," 0.6666666666666666,\n"," 0.8333333333333334,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.46153846153846156,\n"," 0.8571428571428571,\n"," 0.8333333333333334,\n"," 0.9333333333333333,\n"," 0.9090909090909091,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.9230769230769231,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.75,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.8333333333333334,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.6,\n"," 0.8333333333333334,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9333333333333333,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.0,\n"," 0.9333333333333333,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.8571428571428571,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.46153846153846156,\n"," 0.6666666666666666,\n"," 0.9230769230769231,\n"," 0.75,\n"," 0.0,\n"," 0.5,\n"," 0.0,\n"," 0.0,\n"," 0.41379310344827586,\n"," 0.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.9,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.4,\n"," 0.0,\n"," 0.0,\n"," 0.4444444444444444,\n"," 0.48,\n"," 0.8571428571428571,\n"," 0.75,\n"," 0.75,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.75,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.8571428571428571,\n"," 0.6,\n"," 0.8333333333333334,\n"," 0.0,\n"," 0.0,\n"," 0.9230769230769231,\n"," 0.0,\n"," 0.9090909090909091,\n"," 0.46153846153846156,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.9,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.3333333333333333,\n"," 0.0,\n"," 0.0,\n"," 0.35294117647058826,\n"," 0.6666666666666666,\n"," 0.9090909090909091,\n"," 0.0,\n"," 0.9473684210526315,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.9473684210526315,\n"," 0.9090909090909091,\n"," 0.8333333333333334,\n"," 0.9473684210526315,\n"," 0.9,\n"," 0.8333333333333334,\n"," 0.9090909090909091,\n"," 0.9090909090909091,\n"," 0.875,\n"," 0.9333333333333333,\n"," 0.9333333333333333,\n"," 0.4444444444444444,\n"," 0.8333333333333334,\n"," 0.8333333333333334,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.38461538461538464,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.55,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.9,\n"," 0.0,\n"," 0.3333333333333333,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9,\n"," 0.0,\n"," 0.0,\n"," 0.4,\n"," 0.4,\n"," 0.1875,\n"," 0.4,\n"," 0.6470588235294118,\n"," 0.8333333333333334,\n"," 0.5454545454545454,\n"," 0.8333333333333334,\n"," 0.0,\n"," 0.7333333333333333,\n"," 0.631578947368421,\n"," 0.0,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.8571428571428571,\n"," 0.2857142857142857,\n"," 0.75,\n"," 1.0,\n"," 0.75,\n"," 0.7857142857142857,\n"," 0.2727272727272727,\n"," 0.46153846153846156,\n"," 0.4,\n"," 0.42857142857142855,\n"," 0.375,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.375,\n"," 0.0,\n"," 0.4444444444444444,\n"," 0.2608695652173913,\n"," 0.21428571428571427,\n"," 0.75,\n"," 0.42857142857142855,\n"," 0.2608695652173913,\n"," 0.75,\n"," 0.6666666666666666,\n"," 1.0,\n"," 0.8571428571428571,\n"," 0.5789473684210527,\n"," 0.9411764705882353,\n"," 1.0,\n"," 1.0,\n"," 0.9411764705882353,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 0.5,\n"," 0.75,\n"," 0.75,\n"," 0.8571428571428571,\n"," 1.0,\n"," 1.0,\n"," 1.0,\n"," 0.75,\n"," 0.6,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.8571428571428571,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.8,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.375,\n"," 0.5454545454545454,\n"," 0.5454545454545454,\n"," 0.8,\n"," 0.2857142857142857,\n"," 0.0,\n"," 0.3157894736842105,\n"," 0.2857142857142857,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.29411764705882354,\n"," 0.375,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.0,\n"," 0.6428571428571429,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.6666666666666666,\n"," 1.0,\n"," 0.35294117647058826,\n"," 0.375,\n"," 0.3333333333333333,\n"," 0.375,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.0,\n"," 0.3,\n"," 0.35294117647058826,\n"," 0.4,\n"," 0.4,\n"," 0.0,\n"," 0.0,\n"," 0.46153846153846156,\n"," 0.4444444444444444,\n"," 0.0,\n"," 0.0,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.42857142857142855,\n"," 0.35294117647058826,\n"," 0.42857142857142855,\n"," 0.6,\n"," 0.3333333333333333,\n"," 0.7142857142857143,\n"," 0.5454545454545454,\n"," 0.42857142857142855,\n"," 0.8181818181818182,\n"," 0.9,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.375,\n"," 0.5454545454545454,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.45454545454545453,\n"," 0.7272727272727273,\n"," 0.375,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.41379310344827586,\n"," 0.3870967741935484,\n"," 0.42857142857142855,\n"," 0.75,\n"," 0.2,\n"," 0.7058823529411765,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.631578947368421,\n"," 0.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.21428571428571427,\n"," 0.2608695652173913,\n"," 0.2608695652173913,\n"," 0.0,\n"," 0.6,\n"," 0.3157894736842105,\n"," 1.0,\n"," 1.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.3,\n"," 0.35294117647058826,\n"," 0.0,\n"," 0.7058823529411765,\n"," 0.6,\n"," 0.0,\n"," 0.6,\n"," 0.0,\n"," 0.0,\n"," 0.375,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.5714285714285714,\n"," 0.5714285714285714,\n"," 0.0,\n"," 0.0,\n"," 0.25,\n"," 0.0,\n"," 0.21428571428571427,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.4782608695652174,\n"," 0.0,\n"," 0.4,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.0,\n"," 0.2727272727272727,\n"," 0.35294117647058826,\n"," 0.0,\n"," 0.0,\n"," 0.21428571428571427,\n"," 0.0,\n"," 0.375,\n"," 0.6666666666666666,\n"," 0.9230769230769231,\n"," 0.9230769230769231,\n"," 0.9230769230769231,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.3157894736842105,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.46153846153846156,\n"," 0.5,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.5,\n"," 0.3,\n"," 0.5714285714285714,\n"," 0.0,\n"," 0.3,\n"," 0.5454545454545454,\n"," 0.2857142857142857,\n"," 0.3,\n"," 0.2608695652173913,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.2727272727272727,\n"," 0.4,\n"," 0.0,\n"," 0.4,\n"," 0.0,\n"," 0.3157894736842105,\n"," 0.3157894736842105,\n"," 0.5625,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.46153846153846156,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.0,\n"," 0.5,\n"," 0.5,\n"," 0.0,\n"," 0.6428571428571429,\n"," 0.6111111111111112,\n"," 0.2857142857142857,\n"," 0.0,\n"," 0.5,\n"," 0.8181818181818182,\n"," 0.7333333333333333,\n"," 0.35294117647058826,\n"," 0.35294117647058826,\n"," 0.5454545454545454,\n"," 0.46153846153846156,\n"," 0.3333333333333333,\n"," 0.375,\n"," 0.5,\n"," 0.7272727272727273,\n"," 0.5454545454545454,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.375,\n"," 1.0,\n"," 0.9230769230769231,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.375,\n"," 0.75,\n"," 0.3157894736842105,\n"," 0.7727272727272727,\n"," 0.5142857142857142,\n"," 0.375,\n"," 0.0,\n"," 0.0,\n"," 1.0,\n"," 0.7142857142857143,\n"," 0.0,\n"," 0.6153846153846154,\n"," 0.0,\n"," 0.375,\n"," 0.0,\n"," 0.0,\n"," 0.25,\n"," 0.6666666666666666,\n"," 0.8181818181818182,\n"," 0.0,\n"," 0.2727272727272727,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.5,\n"," 0.0,\n"," 0.6,\n"," 0.5,\n"," 0.0,\n"," 0.8571428571428571,\n"," 0.75,\n"," 0.35294117647058826,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9,\n"," 0.6666666666666666,\n"," 0.5,\n"," 1.0,\n"," 1.0,\n"," 0.6666666666666666,\n"," 0.47368421052631576,\n"," 0.8571428571428571,\n"," 0.0,\n"," 0.375,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.375,\n"," 0.2777777777777778,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.0,\n"," 0.6470588235294118,\n"," 0.2727272727272727,\n"," 0.8181818181818182,\n"," 0.6,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.2727272727272727,\n"," 0.0,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.4,\n"," 1.0,\n"," 0.3,\n"," 0.5,\n"," 0.0,\n"," 0.6842105263157895,\n"," 0.0,\n"," 0.0,\n"," 0.35294117647058826,\n"," 0.0,\n"," 0.0,\n"," 0.4,\n"," 0.5714285714285714,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.75,\n"," 0.75,\n"," 0.6,\n"," 0.6818181818181818,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.7142857142857143,\n"," 0.3,\n"," 0.0,\n"," 0.46153846153846156,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.9,\n"," 0.3,\n"," 0.0,\n"," 0.0,\n"," 0.8421052631578947,\n"," 0.0,\n"," 0.6875,\n"," 0.35294117647058826,\n"," 0.0,\n"," 0.3333333333333333,\n"," 0.8125,\n"," 0.5714285714285714,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.46153846153846156,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.3157894736842105,\n"," 0.5,\n"," 0.5454545454545454,\n"," 0.4,\n"," 0.4166666666666667,\n"," 0.42857142857142855,\n"," 0.4166666666666667,\n"," 0.75,\n"," 0.4,\n"," 0.0,\n"," 0.75,\n"," 0.6,\n"," 0.6,\n"," 0.6,\n"," 0.42857142857142855,\n"," 0.1935483870967742,\n"," 0.46153846153846156,\n"," 0.7272727272727273,\n"," 0.75,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.5,\n"," 1.0,\n"," 1.0,\n"," 0.35294117647058826,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.6,\n"," 0.5714285714285714,\n"," 0.6666666666666666,\n"," 0.24,\n"," 0.45454545454545453,\n"," 0.5454545454545454,\n"," 0.35714285714285715,\n"," 0.2727272727272727,\n"," 0.5454545454545454,\n"," 0.5714285714285714,\n"," 0.6666666666666666,\n"," 0.0,\n"," 0.6666666666666666,\n"," 0.29411764705882354,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.0,\n"," 0.6153846153846154,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.75,\n"," 0.75,\n"," 0.75,\n"," 0.6,\n"," 0.0,\n"," 0.0,\n"," 0.75,\n"," 0.6,\n"," 0.6666666666666666,\n"," 0.6,\n"," 0.5454545454545454,\n"," 0.6,\n"," 0.6,\n"," 0.2608695652173913,\n"," 0.5555555555555556,\n"," 0.75,\n"," 0.5,\n"," 0.0,\n"," 0.6,\n"," 0.3333333333333333,\n"," 0.75,\n"," 0.5,\n"," 0.8571428571428571,\n"," 0.6666666666666666,\n"," 0.6666666666666666,\n"," 0.75,\n"," 0.0,\n"," 0.3333333333333333,\n"," 0.8571428571428571,\n"," 0.5454545454545454,\n"," 0.75,\n"," 0.5454545454545454,\n"," 0.75,\n"," 0.75,\n"," 0.75,\n"," 0.6,\n"," 0.75,\n"," 0.0,\n"," 0.5217391304347826,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.5,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.5,\n"," 0.46153846153846156,\n"," 1.0,\n"," 0.5454545454545454,\n"," 0.46153846153846156,\n"," 1.0,\n"," 1.0,\n"," 0.6666666666666666,\n"," 0.5454545454545454,\n"," 0.35294117647058826,\n"," 0.8571428571428571,\n"," 0.75,\n"," 0.46153846153846156,\n"," 0.5217391304347826,\n"," 0.75,\n"," 0.75,\n"," 0.6,\n"," 0.631578947368421,\n"," 0.0,\n"," 0.42857142857142855,\n"," 0.3157894736842105,\n"," 0.0,\n"," 0.5454545454545454,\n"," 0.6,\n"," 0.5454545454545454,\n"," 0.6666666666666666,\n"," 1.0,\n"," 0.2857142857142857,\n"," 0.5454545454545454,\n"," 0.0,\n"," 0.35294117647058826,\n"," 0.5217391304347826,\n"," 0.6,\n"," 0.75,\n"," 0.6,\n"," 0.5454545454545454,\n"," 0.6,\n"," 0.6,\n"," 0.9230769230769231,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.375,\n"," 0.0,\n"," 0.3333333333333333,\n"," 0.0,\n"," 0.375,\n"," 0.375,\n"," 0.42857142857142855,\n"," 0.0,\n"," 0.46153846153846156,\n"," 0.4,\n"," 0.0,\n"," 0.5,\n"," 0.0,\n"," 0.0,\n"," 0.4,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.0,\n"," 0.6666666666666666,\n"," ...]"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"9zovyVTQOxvA","outputId":"cf5338a7-4f2f-4dc3-d963-7aaff50babf7","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1660416462220,"user_tz":300,"elapsed":203,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["df_desc_AromaticProportion = pd.DataFrame(desc_AromaticProportion, columns=['AromaticProportion'])\n","df_desc_AromaticProportion"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      AromaticProportion\n","0               0.000000\n","1               0.000000\n","2               0.000000\n","3               0.000000\n","4               0.000000\n","...                  ...\n","1139            0.000000\n","1140            0.333333\n","1141            0.695652\n","1142            0.521739\n","1143            0.461538\n","\n","[1144 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-aa35f74b-4828-441c-b1da-9d523ca011a0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AromaticProportion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1139</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1140</th>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>1141</th>\n","      <td>0.695652</td>\n","    </tr>\n","    <tr>\n","      <th>1142</th>\n","      <td>0.521739</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>0.461538</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1144 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa35f74b-4828-441c-b1da-9d523ca011a0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-aa35f74b-4828-441c-b1da-9d523ca011a0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-aa35f74b-4828-441c-b1da-9d523ca011a0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"3ZKZKPOuCVTY"},"source":["### **3.3. X matrix (Combining all computed descriptors into 1 dataframe)**"]},{"cell_type":"code","metadata":{"id":"6VFAdZwbCg0T","outputId":"f77e2f33-c01f-4850-fc8d-5b74bcb9c168","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1660416487507,"user_tz":300,"elapsed":205,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["df"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      MolLogP    MolWt  NumRotatableBonds\n","0     2.59540  167.850                0.0\n","1     2.37650  133.405                0.0\n","2     2.59380  167.850                1.0\n","3     2.02890  133.405                1.0\n","4     2.91890  187.375                1.0\n","...       ...      ...                ...\n","1139  1.98820  287.343                8.0\n","1140  3.42130  286.114                2.0\n","1141  3.60960  308.333                4.0\n","1142  2.56214  354.815                3.0\n","1143  2.02164  179.219                1.0\n","\n","[1144 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-c220c6bd-1916-4b18-8e39-63b28769975b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolLogP</th>\n","      <th>MolWt</th>\n","      <th>NumRotatableBonds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.59540</td>\n","      <td>167.850</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.37650</td>\n","      <td>133.405</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.59380</td>\n","      <td>167.850</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.02890</td>\n","      <td>133.405</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.91890</td>\n","      <td>187.375</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1139</th>\n","      <td>1.98820</td>\n","      <td>287.343</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>1140</th>\n","      <td>3.42130</td>\n","      <td>286.114</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1141</th>\n","      <td>3.60960</td>\n","      <td>308.333</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1142</th>\n","      <td>2.56214</td>\n","      <td>354.815</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>2.02164</td>\n","      <td>179.219</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1144 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c220c6bd-1916-4b18-8e39-63b28769975b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c220c6bd-1916-4b18-8e39-63b28769975b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c220c6bd-1916-4b18-8e39-63b28769975b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"4HygAkqJCk6z","outputId":"bd06678d-8350-4c6b-af16-82b3667ee189","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1660416494511,"user_tz":300,"elapsed":204,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["df_desc_AromaticProportion"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      AromaticProportion\n","0               0.000000\n","1               0.000000\n","2               0.000000\n","3               0.000000\n","4               0.000000\n","...                  ...\n","1139            0.000000\n","1140            0.333333\n","1141            0.695652\n","1142            0.521739\n","1143            0.461538\n","\n","[1144 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-f5e10772-262e-4dee-98b1-5ccefaf62a5a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AromaticProportion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1139</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1140</th>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>1141</th>\n","      <td>0.695652</td>\n","    </tr>\n","    <tr>\n","      <th>1142</th>\n","      <td>0.521739</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>0.461538</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1144 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5e10772-262e-4dee-98b1-5ccefaf62a5a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f5e10772-262e-4dee-98b1-5ccefaf62a5a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f5e10772-262e-4dee-98b1-5ccefaf62a5a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"KJZT1Ij7Cm7W"},"source":["Let's combine the 2 dataframes to produce the **X** matrix"]},{"cell_type":"code","metadata":{"id":"_lYBhrsaCqEq","outputId":"5c589551-26b4-4405-e8e0-5d23325d437a","colab":{"base_uri":"https://localhost:8080/","height":419},"executionInfo":{"status":"ok","timestamp":1660416499624,"user_tz":300,"elapsed":207,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X = pd.concat([df,df_desc_AromaticProportion], axis=1)\n","X"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      MolLogP    MolWt  NumRotatableBonds  AromaticProportion\n","0     2.59540  167.850                0.0            0.000000\n","1     2.37650  133.405                0.0            0.000000\n","2     2.59380  167.850                1.0            0.000000\n","3     2.02890  133.405                1.0            0.000000\n","4     2.91890  187.375                1.0            0.000000\n","...       ...      ...                ...                 ...\n","1139  1.98820  287.343                8.0            0.000000\n","1140  3.42130  286.114                2.0            0.333333\n","1141  3.60960  308.333                4.0            0.695652\n","1142  2.56214  354.815                3.0            0.521739\n","1143  2.02164  179.219                1.0            0.461538\n","\n","[1144 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-f8bb511e-1852-4c53-92cf-fc457332714c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolLogP</th>\n","      <th>MolWt</th>\n","      <th>NumRotatableBonds</th>\n","      <th>AromaticProportion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.59540</td>\n","      <td>167.850</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.37650</td>\n","      <td>133.405</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.59380</td>\n","      <td>167.850</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.02890</td>\n","      <td>133.405</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.91890</td>\n","      <td>187.375</td>\n","      <td>1.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1139</th>\n","      <td>1.98820</td>\n","      <td>287.343</td>\n","      <td>8.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1140</th>\n","      <td>3.42130</td>\n","      <td>286.114</td>\n","      <td>2.0</td>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>1141</th>\n","      <td>3.60960</td>\n","      <td>308.333</td>\n","      <td>4.0</td>\n","      <td>0.695652</td>\n","    </tr>\n","    <tr>\n","      <th>1142</th>\n","      <td>2.56214</td>\n","      <td>354.815</td>\n","      <td>3.0</td>\n","      <td>0.521739</td>\n","    </tr>\n","    <tr>\n","      <th>1143</th>\n","      <td>2.02164</td>\n","      <td>179.219</td>\n","      <td>1.0</td>\n","      <td>0.461538</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1144 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8bb511e-1852-4c53-92cf-fc457332714c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f8bb511e-1852-4c53-92cf-fc457332714c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f8bb511e-1852-4c53-92cf-fc457332714c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"zZI9k4h6FsPF"},"source":["### **3.4. Y matrix**"]},{"cell_type":"code","metadata":{"id":"OazcNGkMHCu1","outputId":"4520be5b-fbfa-4a86-8ba7-72b5560185b5","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1660416536164,"user_tz":300,"elapsed":238,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["sol.head()"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Compound ID  measured log(solubility:mol/L)  \\\n","0       1,1,1,2-Tetrachloroethane                           -2.18   \n","1           1,1,1-Trichloroethane                           -2.00   \n","2       1,1,2,2-Tetrachloroethane                           -1.74   \n","3           1,1,2-Trichloroethane                           -1.48   \n","4  1,1,2-Trichlorotrifluoroethane                           -3.04   \n","\n","   ESOL predicted log(solubility:mol/L)               SMILES  \n","0                                -2.794       ClCC(Cl)(Cl)Cl  \n","1                                -2.232         CC(Cl)(Cl)Cl  \n","2                                -2.549       ClC(Cl)C(Cl)Cl  \n","3                                -1.961           ClCC(Cl)Cl  \n","4                                -3.077  FC(F)(Cl)C(F)(Cl)Cl  "],"text/html":["\n","  <div id=\"df-1ab201d0-c738-47a0-9539-1942cc2d5e7f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Compound ID</th>\n","      <th>measured log(solubility:mol/L)</th>\n","      <th>ESOL predicted log(solubility:mol/L)</th>\n","      <th>SMILES</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1,1,1,2-Tetrachloroethane</td>\n","      <td>-2.18</td>\n","      <td>-2.794</td>\n","      <td>ClCC(Cl)(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1,1,1-Trichloroethane</td>\n","      <td>-2.00</td>\n","      <td>-2.232</td>\n","      <td>CC(Cl)(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1,1,2,2-Tetrachloroethane</td>\n","      <td>-1.74</td>\n","      <td>-2.549</td>\n","      <td>ClC(Cl)C(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1,1,2-Trichloroethane</td>\n","      <td>-1.48</td>\n","      <td>-1.961</td>\n","      <td>ClCC(Cl)Cl</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1,1,2-Trichlorotrifluoroethane</td>\n","      <td>-3.04</td>\n","      <td>-3.077</td>\n","      <td>FC(F)(Cl)C(F)(Cl)Cl</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ab201d0-c738-47a0-9539-1942cc2d5e7f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1ab201d0-c738-47a0-9539-1942cc2d5e7f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1ab201d0-c738-47a0-9539-1942cc2d5e7f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"6m4Akv3rHG3E"},"source":["Assigning the second column (index 1) to the Y matrix"]},{"cell_type":"code","metadata":{"id":"fcvXs7R7FrbC","outputId":"521ea2de-5d65-489c-9055-f036cad49639","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416538321,"user_tz":300,"elapsed":235,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y = sol.iloc[:,1]\n","Y"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      -2.180\n","1      -2.000\n","2      -1.740\n","3      -1.480\n","4      -3.040\n","        ...  \n","1139    1.144\n","1140   -4.925\n","1141   -3.893\n","1142   -3.790\n","1143   -2.581\n","Name: measured log(solubility:mol/L), Length: 1144, dtype: float64"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"qQYE-jCRSmCn"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"SzrfuUZNFg_X"},"source":["## **Data split**"]},{"cell_type":"code","metadata":{"id":"dMRn8EVjFlrT","executionInfo":{"status":"ok","timestamp":1660416546671,"user_tz":300,"elapsed":878,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["from sklearn.model_selection import train_test_split"],"execution_count":37,"outputs":[]},{"cell_type":"code","metadata":{"id":"aOIAljc1FmXb","executionInfo":{"status":"ok","timestamp":1660416550006,"user_tz":300,"elapsed":248,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)"],"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"39nTAc3UFUMW"},"source":["## **Linear Regression Model**"]},{"cell_type":"code","metadata":{"id":"K0MokzGBCimk","executionInfo":{"status":"ok","timestamp":1660416562748,"user_tz":300,"elapsed":231,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["from sklearn import linear_model\n","from sklearn.metrics import mean_squared_error, r2_score"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"id":"vkR1siPuFZ6X","outputId":"a885db64-3821-4c97-97dc-72455bf53cf3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416565159,"user_tz":300,"elapsed":212,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["model = linear_model.LinearRegression()\n","model.fit(X_train, Y_train)"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"aG4DMzc5Rks9"},"source":["### **Predicts the X_train**"]},{"cell_type":"code","metadata":{"id":"tZr9CBGvRp1F","executionInfo":{"status":"ok","timestamp":1660416601249,"user_tz":300,"elapsed":261,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y_pred_train = model.predict(X_train)"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"0x3saPCyRtJP","outputId":"0acd9a71-53dd-442c-9b7f-37bdda543863","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('Coefficients:', model.coef_)\n","print('Intercept:', model.intercept_)\n","print('Mean squared error (MSE): %.2f'\n","      % mean_squared_error(Y_train, Y_pred_train))\n","print('Coefficient of determination (R^2): %.2f'\n","      % r2_score(Y_train, Y_pred_train))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Coefficients: [-0.7282008  -0.00691046  0.01625003 -0.35627645]\n","Intercept: 0.26284383753800666\n","Mean squared error (MSE): 0.99\n","Coefficient of determination (R^2): 0.77\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"M6evZTPNRecd"},"source":["### **Predicts the X_test**"]},{"cell_type":"code","metadata":{"id":"I_eFbrlaHhPU","executionInfo":{"status":"ok","timestamp":1660416613930,"user_tz":300,"elapsed":202,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y_pred_test = model.predict(X_test)"],"execution_count":42,"outputs":[]},{"cell_type":"code","metadata":{"id":"TQnDfyl5HkUr","outputId":"fbbf18a7-a1e8-4d3c-bb82-b2c33046c9c1","colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print('Coefficients:', model.coef_)\n","print('Intercept:', model.intercept_)\n","print('Mean squared error (MSE): %.2f'\n","      % mean_squared_error(Y_test, Y_pred_test))\n","print('Coefficient of determination (R^2): %.2f'\n","      % r2_score(Y_test, Y_pred_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Coefficients: [-0.7282008  -0.00691046  0.01625003 -0.35627645]\n","Intercept: 0.26284383753800666\n","Mean squared error (MSE): 1.11\n","Coefficient of determination (R^2): 0.75\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nERFfdQBRFF5"},"source":["### **Linear Regression Equation**"]},{"cell_type":"markdown","metadata":{"id":"j3xLiGWHFiY1"},"source":["The work of Delaney$^1$ provided the following linear regression equation:\n","\n","> LogS = 0.16 -  0.63 cLogP - 0.0062 MW + 0.066 RB - 0.74 AP\n","\n","The reproduction by Pat Walters$^2$ provided the following:\n","\n","> LogS = 0.26 -  0.74 LogP - 0.0066 MW + 0.0034 RB - 0.42 AP\n","\n","This notebook's reproduction gave the following equation:\n","\n","* Based on the Train set\n","> LogS = 0.30 -0.75 LogP - .0066 MW -0.0041 RB - 0.36 AP\n","\n","* Based on the Full dataset\n","> LogS =  0.26 -0.74 LogP - 0.0066 + MW 0.0032 RB - 0.42 AP"]},{"cell_type":"markdown","metadata":{"id":"FaWyYnMbWtYu"},"source":["#### **Our linear regression equation**"]},{"cell_type":"code","metadata":{"id":"0TH6J9evHIIE","outputId":"f7b2e105-4477-4c29-b748-0a375a855950","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660417349890,"user_tz":300,"elapsed":402,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["print('LogS = %.2f %.2f LogP %.4f MW %.4f RB %.2f AP' % (model.intercept_, model.coef_[0], model.coef_[1], model.coef_[2], model.coef_[3] ) )"],"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["LogS = 0.28 -0.74 LogP -0.0066 MW -0.0134 RB -0.44 AP\n"]}]},{"cell_type":"markdown","metadata":{"id":"VcJyUzsLSz2A"},"source":["The same equation can also be produced with the following code (which breaks up the previous one-line code into several comprehensible lines."]},{"cell_type":"code","metadata":{"id":"byUbJ9QqK5gA","executionInfo":{"status":"ok","timestamp":1660416979525,"user_tz":300,"elapsed":192,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["yintercept = '%.2f' % model.intercept_\n","LogP = '%.2f LogP' % model.coef_[0]\n","MW = '%.4f MW' % model.coef_[1]\n","RB = '%.4f RB' % model.coef_[2]\n","AP = '%.2f AP' % model.coef_[3]"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"id":"QY-9rh--S-6g","outputId":"d171f114-8ea9-4d5a-a228-3a93b2abcbd4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416983631,"user_tz":300,"elapsed":210,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["print('LogS = ' + \n","      ' ' + \n","      yintercept + \n","      ' ' + \n","      LogP + \n","      ' ' + \n","      MW + \n","      ' ' + \n","      RB + \n","      ' ' + \n","      AP)"],"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["LogS =  0.28 -0.74 LogP -0.0066 MW -0.0134 RB -0.44 AP\n"]}]},{"cell_type":"markdown","metadata":{"id":"R3lRkSOJRm1q"},"source":["#### **Use entire dataset for model training (For Comparison)**"]},{"cell_type":"code","metadata":{"id":"QUye6SsIRl9T","outputId":"452a237d-0ae7-406b-dae5-2cbeeb5d80de","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416995041,"user_tz":300,"elapsed":195,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["full = linear_model.LinearRegression()\n","full.fit(X, Y)"],"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"6tMI8n0oR1b5","executionInfo":{"status":"ok","timestamp":1660416997400,"user_tz":300,"elapsed":243,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["full_pred = model.predict(X)"],"execution_count":48,"outputs":[]},{"cell_type":"code","metadata":{"id":"7ZVD8Fg1R6zt","outputId":"527f018b-a0ef-4aba-d9ab-5613fa65e13d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660416998983,"user_tz":300,"elapsed":223,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["print('Coefficients:', full.coef_)\n","print('Intercept:', full.intercept_)\n","print('Mean squared error (MSE): %.2f'\n","      % mean_squared_error(Y, full_pred))\n","print('Coefficient of determination (R^2): %.2f'\n","      % r2_score(Y, full_pred))"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients: [-0.74173609 -0.00659927  0.00320051 -0.42316387]\n","Intercept: 0.2565006830997185\n","Mean squared error (MSE): 1.01\n","Coefficient of determination (R^2): 0.77\n"]}]},{"cell_type":"code","metadata":{"id":"AFYYzcc1VqIo","executionInfo":{"status":"ok","timestamp":1660417002999,"user_tz":300,"elapsed":220,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["full_yintercept = '%.2f' % full.intercept_\n","full_LogP = '%.2f LogP' % full.coef_[0]\n","full_MW = '%.4f MW' % full.coef_[1]\n","full_RB = '+ %.4f RB' % full.coef_[2]\n","full_AP = '%.2f AP' % full.coef_[3]"],"execution_count":50,"outputs":[]},{"cell_type":"code","metadata":{"id":"zwU4QJhhVsKb","outputId":"a4bb294c-9092-423a-e034-7358e282b030","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660417005642,"user_tz":300,"elapsed":194,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["print('LogS = ' + \n","      ' ' + \n","      full_yintercept + \n","      ' ' + \n","      full_LogP + \n","      ' ' + \n","      full_MW + \n","      ' ' + \n","      full_RB + \n","      ' ' + \n","      full_AP)"],"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["LogS =  0.26 -0.74 LogP -0.0066 MW + 0.0032 RB -0.42 AP\n"]}]},{"cell_type":"markdown","metadata":{"id":"qp-hjUv4IWe-"},"source":["## **Scatter plot of experimental vs. predicted LogS**"]},{"cell_type":"code","metadata":{"id":"hZDdRiPWIZbX","executionInfo":{"status":"ok","timestamp":1660417022408,"user_tz":300,"elapsed":207,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["import matplotlib.pyplot as plt"],"execution_count":52,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q6bP41fKEY9O"},"source":["### **Quick check of the variable dimensions of Train and Test sets**"]},{"cell_type":"code","metadata":{"id":"LA5dH5oiEUnP","outputId":"7d7b2d50-e7a3-4fd3-9e8e-4b98234bc417","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660417031510,"user_tz":300,"elapsed":195,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y_train.shape, Y_pred_train.shape"],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((915,), (915,))"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"HIu7YbbFP-7o","outputId":"a37377c4-c1cd-414b-ed14-b1112e870d4e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660417043313,"user_tz":300,"elapsed":218,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["Y_test.shape, Y_pred_test.shape"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((229,), (229,))"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","metadata":{"id":"OHqv3TlYa5qF"},"source":["### **Vertical plot**"]},{"cell_type":"code","metadata":{"id":"shQPfrHIOmRD","outputId":"c708ebac-7e90-4a20-f4a4-d7c8c33b347a","colab":{"base_uri":"https://localhost:8080/","height":660},"executionInfo":{"status":"ok","timestamp":1660417049892,"user_tz":300,"elapsed":889,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["plt.figure(figsize=(5,11))\n","\n","# 2 row, 1 column, plot 1\n","plt.subplot(2, 1, 1)\n","plt.scatter(x=Y_train, y=Y_pred_train, c=\"#7CAE00\", alpha=0.3)\n","\n","# Add trendline\n","# https://stackoverflow.com/questions/26447191/how-to-add-trendline-in-python-matplotlib-dot-scatter-graphs\n","z = np.polyfit(Y_train, Y_pred_train, 1)\n","p = np.poly1d(z)\n","plt.plot(Y_test,p(Y_test),\"#F8766D\")\n","\n","plt.ylabel('Predicted LogS')\n","\n","\n","# 2 row, 1 column, plot 2\n","plt.subplot(2, 1, 2)\n","plt.scatter(x=Y_test, y=Y_pred_test, c=\"#619CFF\", alpha=0.3)\n","\n","z = np.polyfit(Y_test, Y_pred_test, 1)\n","p = np.poly1d(z)\n","plt.plot(Y_test,p(Y_test),\"#F8766D\")\n","\n","plt.ylabel('Predicted LogS')\n","plt.xlabel('Experimental LogS')\n","\n","plt.savefig('plot_vertical_logS.png')\n","plt.savefig('plot_vertical_logS.pdf')\n","plt.show()"],"execution_count":55,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 360x792 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"PswCQ7Yra_CW"},"source":["### **Horizontal plot**"]},{"cell_type":"code","metadata":{"id":"xG7NWEscT8QO","outputId":"79bb1687-9402-4f94-d3ba-9bfca4f560f3","colab":{"base_uri":"https://localhost:8080/","height":334},"executionInfo":{"status":"ok","timestamp":1660417082656,"user_tz":300,"elapsed":810,"user":{"displayName":"nusrat jahan","userId":"16328812850497088601"}}},"source":["plt.figure(figsize=(11,5))\n","\n","# 1 row, 2 column, plot 1\n","plt.subplot(1, 2, 1)\n","plt.scatter(x=Y_train, y=Y_pred_train, c=\"#7CAE00\", alpha=0.3)\n","\n","z = np.polyfit(Y_train, Y_pred_train, 1)\n","p = np.poly1d(z)\n","plt.plot(Y_test,p(Y_test),\"#F8766D\")\n","\n","plt.ylabel('Predicted LogS')\n","plt.xlabel('Experimental LogS')\n","\n","# 1 row, 2 column, plot 2\n","plt.subplot(1, 2, 2)\n","plt.scatter(x=Y_test, y=Y_pred_test, c=\"#619CFF\", alpha=0.3)\n","\n","z = np.polyfit(Y_test, Y_pred_test, 1)\n","p = np.poly1d(z)\n","plt.plot(Y_test,p(Y_test),\"#F8766D\")\n","\n","plt.xlabel('Experimental LogS')\n","\n","plt.savefig('plot_horizontal_logS.png')\n","plt.savefig('plot_horizontal_logS.pdf')\n","plt.show()"],"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 792x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WXn0vFThYYFT","outputId":"2f773866-f4d9-40ae-8215-630271755cec","colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["! ls -l"],"execution_count":null,"outputs":[{"output_type":"stream","text":["total 83300\n","-rw-r--r-- 1 root root    58889 Apr 11 04:11 delaney.csv\n","-rwxr-xr-x 1 root root 85055499 Mar 11 16:08 Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","-rw-r--r-- 1 root root    30020 Apr 11 04:44 plot_horizontal_logS.pdf\n","-rw-r--r-- 1 root root    50234 Apr 11 04:44 plot_horizontal_logS.png\n","-rw-r--r-- 1 root root    30021 Apr 11 04:40 plot_vertical_logS.pdf\n","-rw-r--r-- 1 root root    51340 Apr 11 04:40 plot_vertical_logS.png\n","drwxr-xr-x 1 root root     4096 Apr  3 16:24 sample_data\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ARiv3f1iC565"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"jwM1QHeLbxJl"},"source":["## **Reference**\n","\n","1. John S. Delaney. [ESOL:  Estimating Aqueous Solubility Directly from Molecular Structure](https://pubs.acs.org/doi/10.1021/ci034243x). ***J. Chem. Inf. Comput. Sci.*** 2004, 44, 3, 1000-1005.\n","\n","2. Pat Walters. [Predicting Aqueous Solubility - It's Harder Than It Looks](http://practicalcheminformatics.blogspot.com/2018/09/predicting-aqueous-solubility-its.html). ***Practical Cheminformatics Blog***\n","\n","3. Bharath Ramsundar, Peter Eastman, Patrick Walters, and Vijay Pande. [Deep Learning for the Life Sciences: Applying Deep Learning to Genomics, Microscopy, Drug Discovery, and More](https://learning.oreilly.com/library/view/deep-learning-for/9781492039822/), O'Reilly, 2019.\n","\n","4. [Supplementary file](https://pubs.acs.org/doi/10.1021/ci034243x) from Delaney's ESOL:  Estimating Aqueous Solubility Directly from Molecular Structure."]}]}